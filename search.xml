<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Authentication in Node.js</title>
    <url>/2022/03/03/Authentication-in-Node-js/</url>
    <content><![CDATA[<p>Authentication is important in web application. The typical way is using username and password. We also need more security features to protect users credentials</p>
<span id="more"></span>

<h1 id="Password-hashing"><a href="#Password-hashing" class="headerlink" title="Password hashing"></a>Password hashing</h1><p>Password should never be saved as plain text in database. We should hash or encrypt the passwords. To achieve this, we use <code>bcryptjs</code> </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm install bcryptjs</span><br></pre></td></tr></table></figure>

<p>To hash a password:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">cosnt bcrypt = <span class="built_in">require</span>(<span class="string">&#x27;bcryptjs&#x27;</span>);</span><br><span class="line">bcrypt.hash(password, <span class="number">12</span>) <span class="comment">// 12 is the round of hashing. Higher is more secure but need more computing time. </span></span><br><span class="line">.then(<span class="function"><span class="params">hashedPassword</span> =&gt;</span> &#123;</span><br><span class="line">	user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">		<span class="attr">email</span>: email,</span><br><span class="line">		<span class="attr">password</span>: hashedPassword</span><br><span class="line">	&#125;)</span><br><span class="line">	user.save();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Protecting-route"><a href="#Protecting-route" class="headerlink" title="Protecting route"></a>Protecting route</h1><p>We need middleware to protect our routes so unauthorized access through path can be prevented. </p>
<p>For example, we can create a middleware called is-auth:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.session.isLoggedIn) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This middleware will check if the request has a session with <code>isLoggedIn</code>, if it doesn’t have, then redirect response to /login, else, go to next middleware.</p>
<p>Then we can use this middleware in our routes:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/add-product&#x27;</span>, isAuth, adminController.getAddProduct);</span><br></pre></td></tr></table></figure>

<p>In this router, request reaches <code>/add-product</code> first, then the server check if it’s authenticated with isAuth middleware. If it is, then goes to <code>adminController.getAddProduct</code>. If it’s not, then it’s redirected to <code>/login</code> as mentioned above. </p>
<h1 id="CSRF-token-to-protect-against-malicious-request"><a href="#CSRF-token-to-protect-against-malicious-request" class="headerlink" title="CSRF token to protect against malicious request"></a>CSRF token to protect against malicious request</h1><p>For CSRF, check: <a href="https://owasp.org/www-community/attacks/csrf">Cross Site Request Forgery (CSRF) | OWASP Foundation</a></p>
<p>We need another package called <code>csurf</code> to generate CSRF token for client. So the client need this token to complete its request. The token is regenerated for each rendered page.  </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm install csurf</span><br></pre></td></tr></table></figure>

<p>To use this package:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> csrf = <span class="built_in">require</span>(<span class="string">&#x27;csurf&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> csrfProtection = csrf();</span><br><span class="line">...<span class="comment">// middleware for session </span></span><br><span class="line">app.use(csrfProtection);</span><br></pre></td></tr></table></figure>

<p>ATTENTION: middleware for csrf have to be after middleware for session. </p>
<p>By using csurf, each non-get request will be checked if it has a token. </p>
<p>When client get a page, it will get a csrf token through <code>req.csrfToken()</code> For example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.getIndex = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  Product.find()</span><br><span class="line">    .then(<span class="function"><span class="params">products</span> =&gt;</span> &#123;</span><br><span class="line">      res.render(<span class="string">&#x27;shop/index&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">prods</span>: products,</span><br><span class="line">        <span class="attr">pageTitle</span>: <span class="string">&#x27;Shop&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">isAuthenticated</span>: req.session.isLoggedIn,</span><br><span class="line">        <span class="attr">csrfToken</span>: req.csrfToken() <span class="comment">// assign csrfToken to variable called csrfToken</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>When client sends non-get request from the same page, it should contain a parameter “_csrf” with value of csrfToken. For example, if we have logout form on the page of index :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/logout&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_csrf&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;%= csrfToken %&gt;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Add-user-feedback-for-sent-requests"><a href="#Add-user-feedback-for-sent-requests" class="headerlink" title="Add user feedback for sent requests"></a>Add user feedback for sent requests</h1><p>To send feedback to users for invalid input, we use <code>connect-flash</code> :</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm install connect-flash</span><br></pre></td></tr></table></figure>

<p>Then add it as middleware:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flash = <span class="built_in">require</span>(<span class="string">&#x27;connect-flash&#x27;</span>);</span><br><span class="line">app.use(flash()); <span class="comment">// this has to be after session middleware</span></span><br></pre></td></tr></table></figure>

<p>Now, we can use this middleware in all of our controllers. For example, in auth.js:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">User.findOne(&#123; <span class="attr">email</span>: email &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      req.flash(<span class="string">&#x27;error&#x27;</span>, <span class="string">&quot;Invalid email or password&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">	&#125;)...</span><br></pre></td></tr></table></figure>

<p>This will assign value “<code>Invalid email or password</code>” with key “<code>error</code>”</p>
<p>To fetch this value:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">req.flash(<span class="string">&#x27;error&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Authentication</tag>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Call API from Facebook</title>
    <url>/2022/01/31/Call-API-from-Facebook/</url>
    <content><![CDATA[<p>Simple walkthrough Facebook OAuth login and call API</p>
<span id="more"></span>

<h1 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h1><p>Create an app: Skipped. Go to Facebook developer </p>
<p>Besides, take note for app id and app secret</p>
<h1 id="Call-authorization-end-point"><a href="#Call-authorization-end-point" class="headerlink" title="Call authorization end point"></a>Call authorization end point</h1><p>Add a OAuth redirect URI. The URI should be encoded. Check: <a href="https://www.urlencoder.org/">https://www.urlencoder.org/</a></p>
<p>Use your browser visit:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.facebook.com/v12.0/dialog/oauth?client_id=&#123;app-id&#125;&amp;redirect_uri=&#123;redirect-uri&#125;&amp;state=1</span><br></pre></td></tr></table></figure>

<p>Replace <code>app-id</code> and <code>redirect-uri</code></p>
<p>The browser will be redirected to the url set by you with a code:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/?code=AQDf_x7kmu_Kq2GXPQ8ZH5xy5brC2V_n0TqNngEj8gNHlAY4qyph1aOGxpZIfiwasueJOHZ0P-FkdZGV5qHZCL1ILM58G1l9CYlJVltasRWSwC7vAH5aWp6tNPT8eFZfifzf8SSv6fp2G1dNfJHBkh6FUDCjro1hOFUz_I7zyFfK7TKQNUccle8Q_YrC9uASjoNMOEgJb4Rs4QHaEuUO3lI7kqJXjZqvBGnIKWOZoFqdIt4Q0DFNtgd8KEbQtoNLbq4FJbZAIBk99pMb6U-qeQ0RcF5tX0RgvUJAlISD7GhqRjwFfGKMiyaVQGZOFSpvHLCEOdOsYy3KggLl00Bk-YSXayKegZ4OYE9tR1vlkyN9W_C-LMmhgEMpwNOz-GEoscZ1C4m89znp3bzY0YcQCv4wiyF47Xz3E8ItsU1_tDglJd2wkZBvIWXquHuvbSIIZKY&amp;state=1#_=_</span><br></pre></td></tr></table></figure>

<h1 id="Token-endpoint"><a href="#Token-endpoint" class="headerlink" title="Token endpoint"></a>Token endpoint</h1><p>It’s GET instead of POST</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//graph.facebook.com/v12.0/oauth/access_token?redirect_uri=&#123;encoded-uri&#125;&amp;client_id=&#123;app-id&#125;&amp;client_secret=&#123;app-secret&#125;&amp;code=&#123;code&#125;</span></span><br></pre></td></tr></table></figure>

<p>replace <code>encoded-uri</code>, <code>app-id</code>, <code>app-secret</code>, <code>code</code>. </p>
<p>It will return with access_token:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;EAAI2o6ZAfRqgBANx3A6oymSKAz7rmuZCZAtEHudr1hvASwrInuvxitrAZC9QHqzkeiLLnynqvou1FmOabIaaMeamoOLfSTebsPKtTTKJEkW1SML1cjFKECth4bvMZAKMcsfhlUyCQ5TIj76ZBZBfbHNBeLTFTBfeZAxb8ZCO8n9zv1Kcg6EXpmeVq8SUnunStIhaTGIX4bZBQri4DHSbN5bcLnhqdCjyDIFJgBQGke7HjMNyyoZBgUlhs5HYq64Rg8h58MZD&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;expires_in&quot;</span>: <span class="number">5182590</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Call-API"><a href="#Call-API" class="headerlink" title="Call API"></a>Call API</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&quot;Accept: application/json&quot;</span> -H <span class="string">&quot;Authorization: Bearer EAAI2o6ZAfRqgBANx3A6oymSKAz7rmuZCZAtEHudr1hvASwrInuvxitrAZC9QHqzkeiLLnynqvou1FmOabIaaMeamoOLfSTebsPKtTTKJEkW1SML1cjFKECth4bvMZAKMcsfhlUyCQ5TIj76ZBZBfbHNBeLTFTBfeZAxb8ZCO8n9zv1Kcg6EXpmeVq8SUnunStIhaTGIX4bZBQri4DHSbN5bcLnhqdCjyDIFJgBQGke7HjMNyyoZBgUlhs5HYq64Rg8h58MZD&quot;</span> <span class="string">&quot;https://graph.facebook.com/me&quot;</span></span><br></pre></td></tr></table></figure>

<p>This api call will return name and user id.</p>
]]></content>
      <categories>
        <category>API</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>OAuth</tag>
      </tags>
  </entry>
  <entry>
    <title>Callback vs Promise vs Async</title>
    <url>/2022/01/25/Callback-vs-Promise-vs-Async/</url>
    <content><![CDATA[<p>When passing a function to another function as a parameter, the passed function is called callback function.</p>
<blockquote>
<p>A <strong><code>Promise</code></strong> is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action’s eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a <em>promise</em> to supply the value at some point in the future.</p>
</blockquote>
<span id="more"></span>

<p><img src="/images/callback-promise-async1.png" alt="How promise works"></p>
<p>An async function is a function declared with the <code>async</code> keyword, and the <code>await</code> keyword is permitted within it. The <code>async</code> and <code>await</code> keywords enable asynchronous, promise-based behaviour to be written in a cleaner style, avoiding the need to explicitly configure promise chains.</p>
<p>To explain these three concepts, we can use example provided in </p>
<p><a href="https://www.youtube.com/watch?v=PoRJizFvM7s">https://www.youtube.com/watch?v=PoRJizFvM7s</a></p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/PoRJizFvM7s" frameborder="0" loading="lazy" allowfullscreen></iframe></div>

<p>If we have posts:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">    &#123;<span class="attr">title</span>: <span class="string">&#x27;post 1&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;this is post one&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">title</span>: <span class="string">&#x27;post 2&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;this is post two&#x27;</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>And <code>getPosts</code> function:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        posts.forEach(<span class="function">(<span class="params">post</span>) =&gt;</span> &#123;</span><br><span class="line">            output += <span class="string">`&lt;li&gt;<span class="subst">$&#123;post.title&#125;</span>&lt;/li&gt;`</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">document</span>.body.innerHTML = output;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Callback-example"><a href="#Callback-example" class="headerlink" title="Callback example:"></a>Callback example:</h1><p>We can have a function to create post:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPost</span>(<span class="params">post, callback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        posts.push(post);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>callback()</code> has to be inside of <code>setTimeout()</code> , otherwise, <code>callback()</code> will run without waiting <code>post.push()</code>. This is the feature of async programming. </p>
<p>Then we can trigger <code>createPost()</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">createPost(&#123;<span class="attr">title</span>: <span class="string">&#x27;post 3&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;this is post three&#x27;</span>&#125;, getPosts);</span><br></pre></td></tr></table></figure>

<p>You will see “post 1” and “post 2” first and then 2 seconds later, “post 3” shows up. </p>
<h1 id="Promise-example"><a href="#Promise-example" class="headerlink" title="Promise example:"></a>Promise example:</h1><p>We can modify <code>createPost</code> to make it return promise:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPost</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="comment">// has to have 2 parameters to indicate callback functions to handle resolve and reject</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            posts.push(post);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> error = <span class="literal">false</span>; </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="string">&#x27;Error !&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then call the function:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">createPost(&#123; <span class="attr">title</span>: <span class="string">&#x27;post 3&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;this is post three&#x27;</span>&#125;)</span><br><span class="line">    .then(getPosts)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure>

<p>This has the same effect as using callback function mentioned above. </p>
<p>If we change <code>error</code> to <code>true</code> in <code>createPost</code> , the <code>catch</code> will handle the error, which is <code>console.log</code>.</p>
<p>In addition, we can handle multiple promises:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> </span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>, <span class="string">&#x27;goodbye&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> promise4 = fetch(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2, promise3])</span><br><span class="line">	.then(<span class="function">(<span class="params">values</span>) =&gt;</span> <span class="built_in">console</span>.log(values)); </span><br></pre></td></tr></table></figure>

<p>Result:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>, <span class="string">&#x27;goodbye&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h1 id="Async-example"><a href="#Async-example" class="headerlink" title="Async example:"></a>Async example:</h1><p>Async function is more elegant. So we don’t need <code>.then()</code> of promise. <code>createPost</code> function is the same as the previous one. Then, we need the keyword <code>async</code> before the function that triggers <code>createPost</code> and <code>getPosts</code>. And put <code>await</code> before the function <code>createPost</code> which needs to be waited until completed. </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> createPost(&#123; <span class="attr">title</span>: <span class="string">&#x27;post 3&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;this is post three&#x27;</span>&#125;);</span><br><span class="line">    getPosts();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init();</span><br></pre></td></tr></table></figure>

<p><code>init</code> will start <code>createPost</code>.  Once <code>createPost</code> is completed, it will trigger <code>getPosts</code></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Syntax</tag>
        <tag>Async</tag>
      </tags>
  </entry>
  <entry>
    <title>Creating a server with Node.js</title>
    <url>/2022/01/25/Creating-a-server-with-NodeJS/</url>
    <content><![CDATA[<p>To create a server, we need http module. The application also should keep running with listening to a port. </p>
<p>We also need write some code to deal with received request and sending response. </p>
<span id="more"></span>

<h1 id="Creating"><a href="#Creating" class="headerlink" title="Creating"></a>Creating</h1><p>Example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rqListener</span>(<span class="params">req, res</span>) </span>&#123; <span class="comment">// using req, res is common practice</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.url, req.method, req.headers);</span><br><span class="line">		<span class="comment">// process.exit(); // close down the server once print the result</span></span><br><span class="line">		res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>); <span class="comment">// attach a header to response, telling the type is html</span></span><br><span class="line">    res.write(<span class="string">&#x27;&lt;html&gt;&#x27;</span>);</span><br><span class="line">    res.write(<span class="string">&#x27;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&#x27;</span>);</span><br><span class="line">    res.write(<span class="string">&#x27;&lt;body&gt;&lt;h1&gt;hello&lt;/h1&gt;&lt;/body&gt;&#x27;</span>);</span><br><span class="line">    res.write(<span class="string">&#x27;&lt;/html&gt;&#x27;</span>);</span><br><span class="line">    res.end(); <span class="comment">// This is the end; content after this point won&#x27;t be sent</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(rqListener); <span class="comment">// have to pass a callback function when create a server</span></span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>); <span class="comment">// this will keep running</span></span><br></pre></td></tr></table></figure>

<p>These codes will send a page with title as “Test” and content-type is “text/html” </p>
<h1 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h1><p>We can add some if statements to handle the request and send response accordingly.</p>
<p>Example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = req.url;</span><br><span class="line">    <span class="keyword">const</span> method = req.method;</span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>); <span class="comment">// attach a header to response, telling the type is html</span></span><br><span class="line">        res.write(<span class="string">&#x27;&lt;html&gt;&#x27;</span>);</span><br><span class="line">        res.write(<span class="string">&#x27;&lt;head&gt;&lt;title&gt;Enter message&lt;/title&gt;&lt;/head&gt;&#x27;</span>);</span><br><span class="line">        res.write(<span class="string">&#x27;&lt;body&gt;&lt;form action=&quot;/message&quot; method=&quot;POST&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;message&quot;&gt;&lt;button type=&quot;submit&quot;&gt;Send&lt;/button&gt;&lt;/form&gt;&lt;/body&gt;&#x27;</span>);</span><br><span class="line">        res.write(<span class="string">&#x27;&lt;/html&gt;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.end(); <span class="comment">// This is the end; content after this point won&#x27;t be sent</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>These code will send back a form with input box to user when user sends request</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (url === <span class="string">&#x27;/message&#x27;</span> &amp;&amp; method === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        fs.writeFileSync(<span class="string">&#x27;message.txt&#x27;</span>, <span class="string">&#x27;dummy&#x27;</span>);</span><br><span class="line">        res.statusCode = <span class="number">302</span>;</span><br><span class="line">        res.setHeader(<span class="string">&#x27;Location&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The code above will see if user send ‘/message’ POST request. If so, create a file called ‘message.txt’ and save ‘dummy’ into that file. Then return code 302 and redirect page to ‘ localhost:port/ ’.  </p>
<h1 id="Parsing-request-data"><a href="#Parsing-request-data" class="headerlink" title="Parsing request data"></a>Parsing request data</h1><p>We can set event listener on request with <code>on</code>. </p>
<p>For example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> body = [];</span><br><span class="line"><span class="comment">// listen on data event</span></span><br><span class="line">req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(chunk);</span><br><span class="line">    body.push(chunk);</span><br><span class="line">    <span class="built_in">console</span>.log(body);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// listen on end event</span></span><br><span class="line">req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parsedBody = Buffer.concat(body).toString();</span><br><span class="line">    <span class="built_in">console</span>.log(parsedBody); <span class="comment">// print message=...</span></span><br><span class="line">    <span class="keyword">const</span> message = parsedBody.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]; <span class="comment">// get content after = </span></span><br><span class="line">    fs.writeFileSync(<span class="string">&#x27;message.txt&#x27;</span>, message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>The <code>&#39;data&#39;</code> event emits either a <code>Buffer</code> (by default) or a string if <code>setEncoding()</code> was used.</p>
<p>In the code above, when the event happens, print out the chunk of this data and push it into an array. </p>
<p>The <code>&#39;end&#39;</code> event is emitted when the stream has received an EOF (FIN in TCP terminology). Indicates that no more <code>&#39;data&#39;</code> events will happen. If the stream is also writable, it may be possible to continue writing.</p>
<p>In the code above, the data is stored in a text file.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Desctructuring object</title>
    <url>/2022/01/25/Desctructuring-object/</url>
    <content><![CDATA[<p>In a destructuring assignment, the value on the righthand side of the equals sign is an array or object (a “structured” value), and the lefthand side specifies one or more variable names using a syntax that mimics array and object literal syntax. When a destructuring assignment occurs, one or more values are extracted (“destructured”) from the value on the right and stored into the variables named on the left.</p>
<span id="more"></span>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x,y] = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(x,y); <span class="comment">// print 1 2</span></span><br><span class="line">[x,y] = [y,x]</span><br><span class="line"><span class="built_in">console</span>.log(x,y); <span class="comment">// print 2 1</span></span><br><span class="line">[x,y] = [x+<span class="number">1</span>, y+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(x,y); <span class="comment">// print 3 2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(o)); <span class="comment">// print [[&#x27;x&#x27;, 1], [&#x27;y&#x27;, 2]]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [name, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(o)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, value);</span><br><span class="line">&#125; <span class="comment">// print x 1 and y 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;x, y&#125; = o; <span class="comment">// extract from object o</span></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p><strong>Destructuring function parameter</strong></p>
<p>To extract attribute from object in function parameter:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;max&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">29</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params">&#123; name &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line">getName(person); <span class="comment">// print &#x27;max&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Syntax</tag>
      </tags>
  </entry>
  <entry>
    <title>Express basic routing</title>
    <url>/2022/01/26/Express-basic-routing/</url>
    <content><![CDATA[<p>Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. In express, everything is middleware.</p>
<span id="more"></span>

<p><a href="https://expressjs.com/en/api.html#express">Express 4.x API</a></p>
<h1 id="Install-express"><a href="#Install-express" class="headerlink" title="Install express:"></a>Install express:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save express</span><br></pre></td></tr></table></figure>

<h1 id="Basic-request-response-handling"><a href="#Basic-request-response-handling" class="headerlink" title="Basic request/response handling"></a>Basic request/response handling</h1><p>Let’s create a simple routing here: </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>); <span class="comment">// check the source code, it exports a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; <span class="comment">// use add a middleware to the stack</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;in the middleware&#x27;</span>);</span><br><span class="line">  next(); <span class="comment">// allows the request to continue to the next middleware</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;in another middleware&#x27;</span>);</span><br><span class="line">  res.send(<span class="string">&#x27;&lt;h1&gt;hello from express&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>After running the code above, got to “localhost:3000”, we will get “hello from express” in the browser and two messages in console. </p>
<p>We can add some specific path for handling. For example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/path&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;...&#125;);</span><br></pre></td></tr></table></figure>

<p>The default path is <code>/</code>, if we don’t specify any path here</p>
<p>NodeJS parse from top to bottom, if one function doesn’t have <code>next()</code> in its body, it will block the code and request won’t go to the next function. For example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use (<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;always run&#x27;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/add-product&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;in another middleware&#x27;</span>);</span><br><span class="line">  res.send(<span class="string">&#x27;&lt;h1&gt;Add product&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>When we send request <code>‘/add-product’</code>, The first <code>app.use()</code> has <code>next()</code>, so the second one will be reached and send response back. If the first one doesn’t have <code>next()</code> , the second one won’t be executed, the page will keep loading because there’s no response sent back. </p>
<p>To parse request body, we need package called body-parser</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save body-parser</span><br></pre></td></tr></table></figure>

<p>And use bodyParser before all the middlewares</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br></pre></td></tr></table></figure>

<p><code>app.use</code> will handle all types of requests. To handle POST request particularly, just change <code>use</code> to <code>post</code>. </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/path&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;...&#125;);</span><br></pre></td></tr></table></figure>

<p>To handle other http requests, we just need to change it to <code>put</code>, <code>get</code>, etc.  </p>
<h1 id="Express-routing"><a href="#Express-routing" class="headerlink" title="Express routing"></a>Express routing</h1><p>We can construct some modules to improve reusability:</p>
<p>For example, we can make an admin module to handle get request <code>/add-product</code> to get form data for adding product and post request <code>/product</code> to post form data:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="comment">// below will get a form </span></span><br><span class="line">router.get(<span class="string">&#x27;/add-product&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;&lt;form action=&quot;/product&quot; method=&quot;POST&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;&lt;button type=&quot;submit&quot;&gt;Add product&lt;/button&gt;&lt;/form&gt;&#x27;</span>);</span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">// below will post the form data</span></span><br><span class="line">router.post(<span class="string">&#x27;/product&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body);</span><br><span class="line">  res.redirect(<span class="string">&#x27;/&#x27;</span>); <span class="comment">// once print out the body of request, redirect to /</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>

<p>Then we can use this module in our entry point (<code>app.js</code> for this example):</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> adminRoutes = <span class="built_in">require</span>(<span class="string">&#x27;./admin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.use(adminRoutes);</span><br><span class="line">app.listen(<span class="number">3000</span>); <span class="comment">// this will create server and listen on 3000</span></span><br></pre></td></tr></table></figure>

<h2 id="Difference-between-app-use-and-router-get"><a href="#Difference-between-app-use-and-router-get" class="headerlink" title="Difference between app.use() and router.get()"></a>Difference between <code>app.use()</code> and <code>router.get()</code></h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/first&#x27;</span>, router); <span class="comment">// mount the router as middleware at path /first</span></span><br><span class="line">router.get(<span class="string">&#x27;/sud&#x27;</span>, smaller);</span><br><span class="line">router.get(<span class="string">&#x27;/user&#x27;</span>, bigger);</span><br></pre></td></tr></table></figure>

<p>When sending <code>/first/sud</code> smaller function will be called.</p>
<p>If you open <code>/first/user</code>, then the <code>bigger</code> function will get called.</p>
<p><code>app</code> mounts middleware first, <code>router</code> set subpath accordingly</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/first&#x27;</span>, fun);</span><br><span class="line">app.get(<span class="string">&#x27;/sud&#x27;</span>, bigger);</span><br><span class="line">app.get(<span class="string">&#x27;/user&#x27;</span>, smaller);</span><br></pre></td></tr></table></figure>

<p>In the code above, functions will be called at <code>/first</code>, <code>/sud</code>, <code>/user</code>. </p>
<p>If we call <code>/first/sud</code>, there’s no response.</p>
<h1 id="Filtering-paths"><a href="#Filtering-paths" class="headerlink" title="Filtering paths"></a>Filtering paths</h1><p>If request type is different, it can have the same path. For example</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/add-product&#x27;</span>...)</span><br><span class="line">router.post(<span class="string">&#x27;/add-product&#x27;</span>...)</span><br></pre></td></tr></table></figure>

<p><code>app.use</code>  can have filtering path</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, adminRouters) </span><br></pre></td></tr></table></figure>

<p>If we have <code>route.get(’/add-product’ ...)</code> within adminRouters, we need send request <code>‘/admin/add-product’</code> to get result.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Server</tag>
        <tag>Routing</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript function</title>
    <url>/2022/01/24/JavaScript-function/</url>
    <content><![CDATA[<p>JS functions are parameterized. They have a list of identifiers, known as parameters, that work as local variables for the body of the function. </p>
<p>In addition to the arguments, each invocation has another value — the invocation context: the value of <code>this</code> keyword. </p>
<p>It’s a good idea to use <code>const</code> for function name. </p>
<p>Function defined with expressions can’t be invoked before they are defined. </p>
<span id="more"></span>

<p>Example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(hello1());</span><br><span class="line"><span class="built_in">console</span>.log(hello2());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hello2 will throw exception as it&#x27;s called before initialization</span></span><br><span class="line"><span class="keyword">const</span> hello2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>In short, with arrow functions there are no binding of <code>this</code>.</p>
<p>In regular functions the <code>this</code> keyword represented the object that called the function, which could be the window, the document, a button or whatever.</p>
<p>With arrow functions the <code>this</code> keyword <em>always</em> represents the object that defined the arrow function.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.name = <span class="string">&quot;global&quot;</span>; <span class="comment">// In nodejs, there&#x27;s no global variable called window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;jason&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">shout</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;my name is &quot;</span>, <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">shout2</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;my name is &quot;</span>, <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Shorter syntax</span></span><br><span class="line">    <span class="function"><span class="title">shout3</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;my name is &quot;</span>, <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.shout();  <span class="comment">// &quot;jason&quot;</span></span><br><span class="line">person.shout2(); <span class="comment">// &quot;global&quot;</span></span><br><span class="line">person.shout3(); <span class="comment">// &quot;jason&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Syntax</tag>
      </tags>
  </entry>
  <entry>
    <title>Mail in Node.js</title>
    <url>/2022/03/04/Mail-in-Node-js/</url>
    <content><![CDATA[<p>Sending mail helps communicate with users of website. We can use nodemailer and SenderGrid in our project to send email. </p>
<span id="more"></span>

<h1 id="Install-nodemailer-and-SendGrid"><a href="#Install-nodemailer-and-SendGrid" class="headerlink" title="Install nodemailer and SendGrid"></a>Install nodemailer and SendGrid</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm install nodemailer nodemailer-sendgrid-transport</span><br></pre></td></tr></table></figure>

<p>We need register an account with SendGrid. Then generate an api key with full access. </p>
<h1 id="Add-middleware"><a href="#Add-middleware" class="headerlink" title="Add middleware"></a>Add middleware</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">&#x27;nodemailer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sendgridTransport = <span class="built_in">require</span>(<span class="string">&#x27;nodemailer-sendgrid-transport&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> transpoerter = nodemailer.createTransport(sendgridTransport(&#123;</span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">api_key</span>: <span class="string">&#x27;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&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<p>To send email:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">transpoerter.sendMail(&#123;</span><br><span class="line">        <span class="attr">to</span>: email,</span><br><span class="line">        <span class="attr">from</span>: <span class="string">&#x27;yanmiao1992@hotmail.com&#x27;</span>,</span><br><span class="line">        <span class="attr">subject</span>: <span class="string">&#x27;Signup succeeded&#x27;</span>,</span><br><span class="line">        <span class="attr">html</span>: <span class="string">&#x27;&lt;h1&gt;You successfully signed up!&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>This will return a promise</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Email</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC with Node.js</title>
    <url>/2022/02/05/MVC-with-NodeJS/</url>
    <content><![CDATA[<p>MVC, model-view-controller is a very common pattern used in web development. We can build it with ExpressJS. Here’s an example of shop-product-admin site. </p>
<span id="more"></span>

<h1 id="Entry-point"><a href="#Entry-point" class="headerlink" title="Entry point"></a>Entry point</h1><p>We usually use app.js as entry point. This entry point loads various middleware and routes request to these middleware.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> errorController = <span class="built_in">require</span>(<span class="string">&#x27;./controllers/error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;views&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> adminRoutes = <span class="built_in">require</span>(<span class="string">&#x27;./routes/admin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> shopRoutes = <span class="built_in">require</span>(<span class="string">&#x27;./routes/shop&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, adminRoutes.routes);</span><br><span class="line">app.use(shopRoutes);</span><br><span class="line"></span><br><span class="line">app.use(errorController.pageNotFound);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p><code>app.use(express.static(path.join(__dirname, &#39;public&#39;)));</code> loads public folder as a static resource. </p>
<h1 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h1><p>product.js is responsible for fetching all the products from file and saving products to file. </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = path.join(</span><br><span class="line">  path.dirname(<span class="built_in">require</span>.main.filename),</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;products.json&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getProductsFromFile = <span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">  fs.readFile(p, <span class="function">(<span class="params">err, fileContent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      <span class="keyword">return</span> cb([]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cb(<span class="built_in">JSON</span>.parse(fileContent));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">title</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">save</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    getProductsFromFile(<span class="function"><span class="params">products</span> =&gt;</span> &#123;</span><br><span class="line">      products.push(<span class="built_in">this</span>);</span><br><span class="line">      fs.writeFile(p, <span class="built_in">JSON</span>.stringify(products), <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">fetchAll</span>(<span class="params">cb</span>)</span> &#123;</span><br><span class="line">    getProductsFromFile(cb);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cart.js is responsible for fetching shop cart data from a file.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = path.join(</span><br><span class="line">  path.dirname(<span class="built_in">require</span>.main.filename),</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;cart.json&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getCartFromFile = <span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(p, <span class="function">(<span class="params">err, content</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      <span class="keyword">return</span> cb([]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cb (<span class="built_in">JSON</span>.parse(content));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">title</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">fetchAll</span>(<span class="params">cb</span>)</span> &#123;</span><br><span class="line">    getCartFromFile(cb);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h1><p>admin.js is to define the paths of different methods/operations for administrator and render the view for the paths. </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Product = <span class="built_in">require</span>(<span class="string">&#x27;../models/product&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.getAddProduct = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&#x27;admin/products&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">docTitle</span>: <span class="string">&#x27;Add Product&#x27;</span>, </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/admin/add-product&#x27;</span>,</span><br><span class="line">    <span class="attr">activeAddProduct</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">formsCSS</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.postAddProduct = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> product = <span class="keyword">new</span> Product(req.body.title);</span><br><span class="line">  product.save();</span><br><span class="line">  res.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.getProducts = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  Product.fetchAll(<span class="function"><span class="params">products</span> =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="string">&#x27;admin/products&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">prods</span>: products,</span><br><span class="line">      <span class="attr">docTitle</span>: <span class="string">&#x27;Admin Products&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/admin/products&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>shop.js is to define the paths of different methods/operations on products. It also defines which pages are rendered for these paths. </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Product = <span class="built_in">require</span>(<span class="string">&#x27;../models/product&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.getProducts = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  Product.fetchAll(<span class="function">(<span class="params">products</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="string">&#x27;shop/product-list&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">prods</span>: products, </span><br><span class="line">      <span class="attr">docTitle</span>: <span class="string">&#x27;Shop&#x27;</span>, </span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">      <span class="attr">hasProducts</span>: products.length &gt; <span class="number">0</span>,</span><br><span class="line">      <span class="attr">activeShop</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">productCSS</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.getIndex = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  Product.fetchAll(<span class="function">(<span class="params">products</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="string">&#x27;shop/index&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">prods</span>: products, </span><br><span class="line">      <span class="attr">docTitle</span>: <span class="string">&#x27;Shop&#x27;</span>, </span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">      <span class="attr">hasProducts</span>: products.length &gt; <span class="number">0</span>,</span><br><span class="line">      <span class="attr">activeShop</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">productCSS</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.getCart = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&#x27;shop/cart&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/car&#x27;</span>,</span><br><span class="line">    <span class="attr">docTitle</span>: <span class="string">&#x27;Your cart&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.getCheckout = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; </span><br><span class="line">  res.render(<span class="string">&#x27;shop/checkout&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/checkout&#x27;</span>,</span><br><span class="line">    <span class="attr">docTitle</span>: <span class="string">&#x27;Checkout&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>error.js controls the path to 404 Page not found error</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.pageNotFound = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&#x27;404&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">docTitle</span>: <span class="string">&#x27;404&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Routes"><a href="#Routes" class="headerlink" title="Routes"></a>Routes</h1><p>Routes are responsible for routing requests to different paths</p>
<p>admin.js will lead GET/POST request to paths as below:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> adminController = <span class="built_in">require</span>(<span class="string">&#x27;../controllers/admin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/add-product&#x27;</span>, adminController.getAddProduct);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/products&#x27;</span>); <span class="comment">// need controller, but unimplemented</span></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/add-product&#x27;</span>, adminController.postAddProduct);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.routes = router;</span><br></pre></td></tr></table></figure>

<p>Remember, we have defined the filter for middleware adminRoutes at the very beginning:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, adminRoutes.routes);</span><br></pre></td></tr></table></figure>

<p>So all the path in admin.js router is under /admin path. </p>
<p>shop.js will lead GET request to paths as below: </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shopController = <span class="built_in">require</span>(<span class="string">&#x27;../controllers/shop&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, shopController.getIndex);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/products&#x27;</span>, shopController.getProducts);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/cart&#x27;</span>, shopController.getCart);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/checkout&#x27;</span>, shopController.getCheckout);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>

<h1 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h1><p>These are defined in app.js:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;views&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>These two lines means the view engine is EJS and views folder is called views in the root directory of this project. View engine doesn’t have to be EJS. You can use pure html if you want.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Routing</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB with Node.js</title>
    <url>/2022/02/27/MongoDB-with-Node-js/</url>
    <content><![CDATA[<p>MongoDB is a famous noSQL database which is fast. The data are stored in collections instead of tables inside the database. </p>
<span id="more"></span>

<h1 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h1><p>Install mongoDB in npm first:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install mongodb</span><br></pre></td></tr></table></figure>

<p>Create database.js to connect with the database, here is the connection to cloud database:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongodb = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> MongoClient = mongodb.MongoClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongoConnect = <span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">  MongoClient.connect(<span class="string">&#x27;mongodb+srv://username:password@cluster0.f6tfr.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority&#x27;</span>)</span><br><span class="line">.then(<span class="function"><span class="params">client</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;connected !&quot;</span>);</span><br><span class="line">  _db = client.db();</span><br><span class="line">  callback();</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="keyword">throw</span> err;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getDb = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (_db) &#123;</span><br><span class="line">    <span class="keyword">return</span> _db;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;No database found&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.mongoConnect = mongoConnect;</span><br><span class="line"><span class="built_in">exports</span>.getDb = getDb;</span><br></pre></td></tr></table></figure>

<p>The string within <code>connect()</code> comes from the configuration of mongoDB Cloud.</p>
<p>Then use following code to connect with database:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">mongoConnect(<span class="function">(<span class="params">client</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(client);</span><br><span class="line">  app.listen(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Create-update-entry-in-DB"><a href="#Create-update-entry-in-DB" class="headerlink" title="Create/update entry in DB"></a>Create/update entry in DB</h1><p>Let’s say we have an object called Product. Within the Product class, we need the function save() to insert/update this object into database. We can check if the product has an id, if it has an id, then do updating procedure. MongoDB has its own way to store primary key, we need <code>new mongodb.ObejctId(id)</code> to generate the product id.</p>
<p>And here’s the class:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getDb = <span class="built_in">require</span>(<span class="string">&#x27;../util/database&#x27;</span>).getDb;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">title, price, description, imageUrl, id</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">    <span class="built_in">this</span>.price = price;</span><br><span class="line">    <span class="built_in">this</span>.description = description;</span><br><span class="line">    <span class="built_in">this</span>.imageUrl = imageUrl;</span><br><span class="line">    <span class="built_in">this</span>._id = id ? <span class="keyword">new</span> mongodb.ObjectId(id) : <span class="literal">null</span>; <span class="comment">// check if the product has an id, if it doesn&#x27;t have one, create a new one</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">save</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> db = getDb();</span><br><span class="line">    <span class="keyword">let</span> dbOp;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>._id) &#123;</span><br><span class="line">      dbOp = db.collection(<span class="string">&#x27;products&#x27;</span>).updateOne( &#123;<span class="attr">_id</span>: <span class="built_in">this</span>._id&#125;, &#123; <span class="attr">$set</span>: <span class="built_in">this</span> &#125; );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dbOp = db.collection(<span class="string">&#x27;products&#x27;</span>).insertOne(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dbOp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Product;</span><br></pre></td></tr></table></figure>

<p>Then, we can create a new Product and save it as below:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> product = <span class="keyword">new</span> Product(title, price, description, imageUrl);</span><br><span class="line">  product.save()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Created product&#x27;</span>);</span><br><span class="line">    res.redirect(<span class="string">&#x27;/admin/products&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch();</span><br></pre></td></tr></table></figure>

<h1 id="Get-Delete"><a href="#Get-Delete" class="headerlink" title="Get / Delete"></a>Get / Delete</h1><p>To get all the entries in a table:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">fetchAll</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> db = getDb();</span><br><span class="line">    <span class="keyword">return</span> db.collection(<span class="string">&#x27;products&#x27;</span>)</span><br><span class="line">    .find()</span><br><span class="line">    .toArray()</span><br><span class="line">    .then(<span class="function"><span class="params">products</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(products);</span><br><span class="line">      <span class="keyword">return</span> products;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>To get an entry by id, we should use <code>new mongodb.ObejctId(id)</code> to get the id in mongodb here: </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">findById</span>(<span class="params">prodId</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> db = getDb();</span><br><span class="line">    <span class="keyword">return</span> db.collection(<span class="string">&#x27;products&#x27;</span>)</span><br><span class="line">    .find(&#123; <span class="attr">_id</span>: <span class="keyword">new</span> mongodb.ObjectId(prodId) &#125;)</span><br><span class="line">    .next()</span><br><span class="line">    .then(<span class="function"><span class="params">product</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(product);</span><br><span class="line">      <span class="keyword">return</span> product;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>In the above example: we used <code>find().next()</code> to get a product. <code>find()</code> will get a cursor to a list of products. Using <code>next()</code> moves the cursor to the first entry of this list. We can use <code>findOne(prodId)</code> alternatively to get a product</p>
<p>To delete entry by id:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">deleteById</span>(<span class="params">prodId</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> db = getDb();</span><br><span class="line">    <span class="keyword">return</span> db.collection(<span class="string">&#x27;products&#x27;</span>).deleteOne(&#123; <span class="attr">_id</span>: <span class="keyword">new</span> mongodb.ObjectId(prodId) &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Deleted&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>To know more MongoDB query language:<br><a href="https://www.notion.so/rogermchen/MongoDB-with-NodeJS-7393af4873c640ff8dfa8261a64fefc2#ddb94de10b5b4b0d896ddd74fcdc2cce">https://www.notion.so/rogermchen/MongoDB-with-NodeJS-7393af4873c640ff8dfa8261a64fefc2#ddb94de10b5b4b0d896ddd74fcdc2cce</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongoose with Node.js</title>
    <url>/2022/03/01/Mongoose-with-Node-js/</url>
    <content><![CDATA[<p>Mongoose is an Object-Document Mapping library. It’s used like ORM in Sequelize. </p>
<span id="more"></span>

<h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm install mongoose</span><br></pre></td></tr></table></figure>

<h1 id="Connect"><a href="#Connect" class="headerlink" title="Connect"></a>Connect</h1><p>We don’t have to configure database.js utility as before. Mongoose will take care for us. </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">mongoose.connect(<span class="string">&#x27;mongodb+srv://username:password@cluster0.f6tfr.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority&#x27;</span>)</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  app.listen(<span class="number">3333</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Create-schema"><a href="#Create-schema" class="headerlink" title="Create schema"></a>Create schema</h1><p>Although mongoDB is schemaless, we still need some restrictions to keep data organized. </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> productSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">price</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">description</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">imageUrl</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">&#x27;Product&#x27;</span>, productSchema);</span><br></pre></td></tr></table></figure>

<h2 id="Create-embedded-document-in-a-schema"><a href="#Create-embedded-document-in-a-schema" class="headerlink" title="Create embedded document in a schema"></a>Create embedded document in a schema</h2><p>If we have an embedded document within a schema (e.g., user has a cart with him)</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">email</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">cart</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>: [&#123;</span><br><span class="line">      <span class="attr">productId</span>: &#123; <span class="attr">type</span>: Schema.Types.ObjectId &#125;, </span><br><span class="line">      <span class="attr">quantity</span>: &#123; <span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125; </span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Save-an-object"><a href="#Save-an-object" class="headerlink" title="Save an object"></a>Save an object</h1><p>Mongoose has embedded method called <code>save()</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> product = <span class="keyword">new</span> Product(&#123;</span><br><span class="line">    <span class="attr">title</span>: title, </span><br><span class="line">    <span class="attr">price</span>: price, </span><br><span class="line">    <span class="attr">description</span>: description, </span><br><span class="line">    <span class="attr">imageUrl</span>: imageUrl</span><br><span class="line">  &#125;);</span><br><span class="line">  product</span><br><span class="line">  .save()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Created product&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Get-object"><a href="#Get-object" class="headerlink" title="Get object"></a>Get object</h1><p>Use <code>findById()</code> can get object by id</p>
<h1 id="Edit-object"><a href="#Edit-object" class="headerlink" title="Edit object"></a>Edit object</h1><p>We can fetch an object with <code>findById()</code> first and edit this object. Then use <code>save()</code> to update this object.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">Product.findById(prodId)</span><br><span class="line">  .then(<span class="function"><span class="params">product</span> =&gt;</span> &#123;</span><br><span class="line">    product.title = updatedTitle;</span><br><span class="line">    product.price = updatedPrice;</span><br><span class="line">    product.description = updatedDesc;</span><br><span class="line">    product.imageUrl = updatedImageUrl;</span><br><span class="line">    <span class="keyword">return</span> product.save();</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Delete-object"><a href="#Delete-object" class="headerlink" title="Delete object"></a>Delete object</h1><p>Use <code>findByIdAndDelete()</code> can get the object and delete it. </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">Product.findByIdAndDelete(prodId)</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;DESTROYED PRODUCT&#x27;</span>);</span><br><span class="line">      res.redirect(<span class="string">&#x27;/admin/products&#x27;</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Create-a-method-for-Mongoose-entity"><a href="#Create-a-method-for-Mongoose-entity" class="headerlink" title="Create a method for Mongoose entity"></a>Create a method for Mongoose entity</h1><p>To create a method, we need <code>methods</code> keyword: </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">userSchema.methods.addToCart = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<h1 id="To-access-document-content-of-embedded-document"><a href="#To-access-document-content-of-embedded-document" class="headerlink" title="To access document content of embedded document"></a>To access document content of embedded document</h1><p>If we want to access embedded document content, for example for object below:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">email</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">cart</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>: [&#123;</span><br><span class="line">      <span class="attr">product</span>: &#123; <span class="attr">type</span>: Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">&#x27;Product&#x27;</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;, </span><br><span class="line">      <span class="attr">quantity</span>: &#123; <span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125; </span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>If we want to access product details within <code>cart.items</code> , we should use <code>._doc</code> .</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> products = user.cart.items.map(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">quantity</span>: i.quantity, <span class="attr">product</span>: &#123; ...i.product._doc &#125; &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>MongoDB</tag>
        <tag>Mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql with Node.js</title>
    <url>/2022/02/10/Mysql-with-NodeJS/</url>
    <content><![CDATA[<p>To connect mysql with NodeJS, we need a package called ‘mysql2’. And setup pool in our database.js. We also need the promise() of the connection pool to use the async feature. </p>
<span id="more"></span>

<h1 id="Setup-connection"><a href="#Setup-connection" class="headerlink" title="Setup connection"></a>Setup connection</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;password&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = pool.promise();</span><br></pre></td></tr></table></figure>

<h1 id="Use-the-database-connection"><a href="#Use-the-database-connection" class="headerlink" title="Use the database connection:"></a>Use the database connection:</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&#x27;./util/database&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Shutdown-database"><a href="#Shutdown-database" class="headerlink" title="Shutdown database"></a>Shutdown database</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">db.end();</span><br></pre></td></tr></table></figure>

<h1 id="Select-query"><a href="#Select-query" class="headerlink" title="Select query"></a>Select query</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">db.execute(<span class="string">&#x27;SELECT * FROM products&#x27;</span>)</span><br><span class="line">	.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(result[<span class="number">0</span>], result[<span class="number">1</span>]);</span><br><span class="line">	&#125;)</span><br><span class="line">	.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(err);</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure>

<p>We can also select with condition:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">db.execute(<span class="string">&#x27;SELECT * FROM products WHERE products.id = ?&#x27;</span>, [id]);</span><br></pre></td></tr></table></figure>

<p>The result of select statement always an array.</p>
<h1 id="Insert-query"><a href="#Insert-query" class="headerlink" title="Insert query"></a>Insert query</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">db.execute(<span class="string">&#x27;INSERT INTO products </span></span><br><span class="line"><span class="string">(title, price, imageUrl, description) </span></span><br><span class="line"><span class="string">VALUES (?, ?, ?, ?)&#x27;</span>,</span><br><span class="line">[<span class="built_in">this</span>.title, <span class="built_in">this</span>.price, <span class="built_in">this</span>.imageUrl, <span class="built_in">this</span>.description]);</span><br></pre></td></tr></table></figure>

<p>Using ? in values creates template for user input so SQL injection can be prevented. </p>
<h1 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h1><p>We use Sequelize package to setup connect.</p>
<p>In database.js, we still need information of our database but there’s no need to construct tables in MySQL</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span> (<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">dialect</span>: <span class="string">&#x27;mysql&#x27;</span>, </span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = sequelize;</span><br></pre></td></tr></table></figure>

<p>For different objects, we use Sequelize to define the data fields in database:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">&#x27;../util/database&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Product = sequelize.define(<span class="string">&#x27;product&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">id</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: Sequelize.INTEGER,</span><br><span class="line">    <span class="attr">autoIncrement</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">primaryKey</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">title</span>: Sequelize.STRING,</span><br><span class="line">  <span class="attr">price</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: Sequelize.DOUBLE,</span><br><span class="line">    <span class="attr">allowNull</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">imageUrl</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: Sequelize.STRING,</span><br><span class="line">    <span class="attr">allowNull</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">description</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: Sequelize.STRING,</span><br><span class="line">    <span class="attr">allowNull</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Product;</span><br></pre></td></tr></table></figure>

<p>We also need to sync our ORM with database in app.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">&#x27;./util/database&#x27;</span>);</span><br><span class="line">sequelize.sync()</span><br><span class="line">.then(</span><br><span class="line">  <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//console.log(result);</span></span><br><span class="line">    app.listen(<span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.catch (<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Sequelize document is here: </p>
<p><a href="https://sequelize.org/v7/index.html">Sequelize</a></p>
<h2 id="Defining-object-relationship"><a href="#Defining-object-relationship" class="headerlink" title="Defining object relationship:"></a>Defining object relationship:</h2><p>Object can have one-to-one, one-to-many, man-to-many relationship, below is an example of defining the relationship:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">Product.belongsTo(User, &#123;<span class="attr">constraints</span>: <span class="literal">true</span>, <span class="attr">onDelete</span>: <span class="string">&#x27;CASCADE&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">// &#123;constraints...&#125; is optional</span></span><br><span class="line">User.hasMany(Product);</span><br></pre></td></tr></table></figure>

<h2 id="Fetch-entry"><a href="#Fetch-entry" class="headerlink" title="Fetch entry"></a>Fetch entry</h2><p>Sequelize has <code>findByPk</code> function to find object by object’s primary key. </p>
<p>Or we can use Where clause with <code>findAll</code> , for example: </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">Product.findAll(&#123; <span class="attr">where</span>: &#123; <span class="attr">id</span>: prodId &#125; &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">products</span> =&gt;</span> &#123;</span><br><span class="line">      res.render(<span class="string">&#x27;shop/product-detail&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">product</span>: products[<span class="number">0</span>],</span><br><span class="line">        <span class="attr">pageTitle</span>: products[<span class="number">0</span>].title,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/products&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>Sequelize provides keyword to fetch product of this user:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">user</span><br><span class="line">  .getProducts(&#123; <span class="attr">where</span>: &#123; <span class="attr">id</span>: prodId &#125; &#125;)</span><br><span class="line">	.then()</span><br><span class="line">	.catch()</span><br></pre></td></tr></table></figure>

<h2 id="Create-entry-in-database"><a href="#Create-entry-in-database" class="headerlink" title="Create entry in database"></a>Create entry in database</h2><p>Using <code>create</code> will create a new entry in database:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">User.create(&#123; <span class="attr">name</span>: <span class="string">&#x27;Max&#x27;</span>, <span class="attr">email</span>: <span class="string">&#x27;test@email.com&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>We can also create a product for this user by using Sequelize keyword:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">user.createProduct(&#123;</span><br><span class="line">      <span class="attr">title</span>: title,</span><br><span class="line">      <span class="attr">price</span>: price,</span><br><span class="line">      <span class="attr">imageUrl</span>: imageUrl,</span><br><span class="line">      <span class="attr">description</span>: description,</span><br><span class="line">      <span class="attr">userId</span>: req.user.id</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">.then(...)</span><br><span class="line">.catch(...);</span><br></pre></td></tr></table></figure>

<h2 id="Many-to-many-relationship"><a href="#Many-to-many-relationship" class="headerlink" title="Many-to-many relationship"></a>Many-to-many relationship</h2><p>To resolve many-to-many relationship, we need a bridging table. For example, one shopping cart can have multiple products and each product can exist in multiple carts. So we need CartItem as a bridging table to connect these two objects. </p>
<p>In Sequelize, we can create Cart as below:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">&#x27;../util/database&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Cart = sequelize.define(<span class="string">&#x27;cart&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">id</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: Sequelize.INTEGER,</span><br><span class="line">    <span class="attr">autoIncrement</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">primaryKey</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Cart;</span><br></pre></td></tr></table></figure>

<p>And CartItem as below:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">&#x27;../util/database&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CartItem = sequelize.define(<span class="string">&#x27;cartItem&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">id</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: Sequelize.INTEGER,</span><br><span class="line">    <span class="attr">autoIncrement</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">primaryKey</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">quantity</span>: Sequelize.INTEGER</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = CartItem;</span><br></pre></td></tr></table></figure>

<p>Then we use <code>belongsToMany</code> to connect Cart and Product:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">Cart.belongsToMany(Product, &#123; <span class="attr">through</span>: CartItem &#125;);</span><br><span class="line">Product.belongsToMany(Cart, &#123; <span class="attr">through</span>: CartItem &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Database</tag>
        <tag>Sequelize</tag>
      </tags>
  </entry>
  <entry>
    <title>OAuth2 (Facebook) setup</title>
    <url>/2022/01/31/OAuth2-Facebook-setup/</url>
    <content><![CDATA[<p>OAuth is commonly used now. This post is for Facebook OAuth login. </p>
<p>All we need is Facebook App ID, App secret. And <code>OAuth2User</code>, <code>DefaultOAuth2UserService</code>, <code>UserDetails</code>, <code>UserDetailsService</code>. In addition, we need Spring security, oauth2-client dependencies. I will use MyBatis for this tiny project. </p>
<span id="more"></span>

<h1 id="Facebook-and-application-configure"><a href="#Facebook-and-application-configure" class="headerlink" title="Facebook and application configure"></a>Facebook and application configure</h1><p>First thing to do is to setup your app with your Facebook developer account. This procedure is omitted here. Once you finished, take a note for your App Id (client Id), App Secret (client secret). Besides, you need to get advanced granted permission for public profile and email. These two permission can be fetched without app review. </p>
<p>Here’s the Yaml file of project, the security part is the one needs attention:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/chat</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">10MB</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">max-swallow-size:</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">oauth2:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">registration:</span></span><br><span class="line">          <span class="attr">facebook:</span></span><br><span class="line">            <span class="attr">clientId:</span> <span class="string">your</span> <span class="string">client</span> <span class="string">Id</span></span><br><span class="line">            <span class="attr">clientSecret:</span> <span class="string">your</span> <span class="string">client</span> <span class="string">secret</span></span><br></pre></td></tr></table></figure>

<h1 id="File-structure"><a href="#File-structure" class="headerlink" title="File structure"></a>File structure</h1><p>Here’s the file structure:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">security</span><br><span class="line">- CustomOAuth2User</span><br><span class="line">- CustomOAuth2UserService</span><br><span class="line">- MyUserDetails</span><br><span class="line">- UserDetailsServiceImp</span><br><span class="line">- WebSecurityConfig</span><br><span class="line">Controller</span><br><span class="line">- LoginController</span><br><span class="line">- HomeController</span><br><span class="line">Model</span><br><span class="line">- User</span><br><span class="line">Mapper</span><br><span class="line">- UserMapper</span><br><span class="line">Service</span><br><span class="line">- UserService</span><br></pre></td></tr></table></figure>

<h1 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h1><p>And Here are needed dependencies:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h1><h2 id="User"><a href="#User" class="headerlink" title="User"></a>User</h2><p>I separated user and role into two tables. You can put them together</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String email; <span class="comment">// This can be used as username</span></span><br><span class="line">    <span class="keyword">private</span> String phone; <span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> String password; </span><br><span class="line">    <span class="keyword">private</span> LocalDate startDate; <span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime loginTime; <span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> roleId; <span class="comment">// Link to role table, you can use barely String here</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isActive; <span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSuspended; <span class="comment">// optional</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Role-optional-or-using-String-inside-User"><a href="#Role-optional-or-using-String-inside-User" class="headerlink" title="Role (optional, or using String inside User)"></a>Role (optional, or using String inside User)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">short</span> roleId;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UserMapper"><a href="#UserMapper" class="headerlink" title="UserMapper"></a>UserMapper</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO user (email, password, startDate, loginTime, roleId, isActive, isSuspended) VALUES &quot; +</span></span><br><span class="line"><span class="meta">            &quot;(#&#123;email&#125;, #&#123;password&#125;, #&#123;startDate&#125;, #&#123;loginTime&#125;, #&#123;roleId&#125;, #&#123;isActive&#125;, #&#123;isSuspended&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;userId&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Read */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user WHERE email = #&#123;email&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results</span> (&#123;</span><br><span class="line">            <span class="meta">@Result(id = true, property = &quot;userId&quot;, column = &quot;userId&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;email&quot;, column = &quot;email&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;phone&quot;, column = &quot;phone&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;password&quot;, column = &quot;password&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;startDate&quot;, column = &quot;startDate&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;loginTime&quot;, column = &quot;loginTime&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;roleId&quot;, column = &quot;roleId&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;isActive&quot;, column = &quot;isActive&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;isSuspended&quot;, column = &quot;isSuspended&quot;)</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">User <span class="title">findByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user WHERE userId = #&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results</span> (&#123;</span><br><span class="line">            <span class="meta">@Result(id = true, property = &quot;userId&quot;, column = &quot;userId&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;email&quot;, column = &quot;email&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;phone&quot;, column = &quot;phone&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;password&quot;, column = &quot;password&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;startDate&quot;, column = &quot;startDate&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;loginTime&quot;, column = &quot;loginTime&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;roleId&quot;, column = &quot;roleId&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;isActive&quot;, column = &quot;isActive&quot;)</span>,</span><br><span class="line">            <span class="meta">@Result(property = &quot;isSuspended&quot;, column = &quot;isSuspended&quot;)</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">long</span> userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM role WHERE roleId = #&#123;roleId&#125;&quot;)</span></span><br><span class="line">    <span class="function">Role <span class="title">getRoleOfUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a>UserService</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processOAuthPostLogin</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        User existedUser = userMapper.findByEmail(email);</span><br><span class="line">        <span class="keyword">if</span>(existedUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            User newUser = <span class="keyword">new</span> User();</span><br><span class="line">            newUser.setEmail(email);</span><br><span class="line">            newUser.setPassword(<span class="string">&quot;password&quot;</span>); <span class="comment">// Should use encryption here, but we stay simple</span></span><br><span class="line">            newUser.setStartDate(LocalDate.now()); <span class="comment">// optional</span></span><br><span class="line">            newUser.setLoginTime(LocalDateTime.now()); <span class="comment">// optional</span></span><br><span class="line">            newUser.setRoleId(<span class="number">2</span>); </span><br><span class="line">            newUser.setActive(<span class="keyword">true</span>); <span class="comment">// optional</span></span><br><span class="line">            newUser.setSuspended(<span class="keyword">false</span>); <span class="comment">// optional</span></span><br><span class="line"></span><br><span class="line">            userMapper.save(newUser);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CustomOAuth2User"><a href="#CustomOAuth2User" class="headerlink" title="CustomOAuth2User"></a>CustomOAuth2User</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomOAuth2User</span> <span class="keyword">implements</span> <span class="title">OAuth2User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OAuth2User oAuth2User;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomOAuth2User</span><span class="params">(OAuth2User oAuth2User)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oAuth2User = oAuth2User;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> oAuth2User.getAttributes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> oAuth2User.getAuthorities();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> oAuth2User.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> oAuth2User.getAttribute(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CustomOAuth2UserService"><a href="#CustomOAuth2UserService" class="headerlink" title="CustomOAuth2UserService"></a>CustomOAuth2UserService</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomOAuth2UserService</span> <span class="keyword">extends</span> <span class="title">DefaultOAuth2UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2User <span class="title">loadUser</span><span class="params">(OAuth2UserRequest userRequest)</span> <span class="keyword">throws</span> OAuth2AuthenticationException </span>&#123;</span><br><span class="line">        OAuth2User user = <span class="keyword">super</span>.loadUser(userRequest);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomOAuth2User(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyUserDetails"><a href="#MyUserDetails" class="headerlink" title="MyUserDetails"></a>MyUserDetails</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetails</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyUserDetails</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthorities</span> <span class="params">(List&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authorities = (Collection&lt;GrantedAuthority&gt;) authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getEmail();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !user.isSuspended(); <span class="comment">// optional, should return true by default</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.isActive(); <span class="comment">// optional, should return true by default</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UserDetailsServiceImp"><a href="#UserDetailsServiceImp" class="headerlink" title="UserDetailsServiceImp"></a>UserDetailsServiceImp</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImp</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String email)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = userMapper.findByEmail(email);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;Couldn&#x27;t find user&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Role role = userMapper.getRoleOfUser(user);</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role.getRoleName()));</span><br><span class="line">        MyUserDetails userDetails = <span class="keyword">new</span> MyUserDetails(user);</span><br><span class="line">        userDetails.setAuthorities(authorities);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDetails;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WebSecurityConfig"><a href="#WebSecurityConfig" class="headerlink" title="WebSecurityConfig"></a>WebSecurityConfig</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomOAuth2UserService oauth2UserService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDetailsServiceImp();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DaoAuthenticationProvider <span class="title">authenticationProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DaoAuthenticationProvider authenticationProvider = <span class="keyword">new</span> DaoAuthenticationProvider();</span><br><span class="line">        authenticationProvider.setUserDetailsService(userDetailsService());</span><br><span class="line">        authenticationProvider.setPasswordEncoder(passwordEncoder());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> authenticationProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span> <span class="params">(AuthenticationManagerBuilder auth)</span> </span>&#123;</span><br><span class="line">        auth.authenticationProvider(authenticationProvider());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .oauth2Login()</span><br><span class="line">                    .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                    .userInfoEndpoint()</span><br><span class="line">                        .userService(oauth2UserService)</span><br><span class="line">                .and()</span><br><span class="line">                .successHandler((request, response, authentication) -&gt; &#123;</span><br><span class="line">                    CustomOAuth2User oAuth2User = (CustomOAuth2User) authentication.getPrincipal();</span><br><span class="line">                    userService.processOAuthPostLogin(oAuth2User.getEmail());</span><br><span class="line"></span><br><span class="line">                    response.sendRedirect(<span class="string">&quot;/home&quot;</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling().accessDeniedPage(<span class="string">&quot;/403&quot;</span>);</span><br><span class="line"></span><br><span class="line">        http.logout();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Front-end"><a href="#Front-end" class="headerlink" title="Front end"></a>Front end</h1><p>Now you can call <code>get</code> <code>/login</code> in webpage. The procedure is omitted. To logout, use <code>post</code> <code>/logout</code>.</p>
<h1 id="PS-how-to-use-Facebook-OAuth-and-API"><a href="#PS-how-to-use-Facebook-OAuth-and-API" class="headerlink" title="PS: how to use Facebook OAuth and API"></a>PS: how to use Facebook OAuth and API</h1><p><a href="https://api-university.com/blog/api-usage/how-to-use-the-facebook-api-and-oauth/">https://api-university.com/blog/api-usage/how-to-use-the-facebook-api-and-oauth/</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Security</tag>
        <tag>OAuth</tag>
        <tag>Spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Serve static content</title>
    <url>/2022/01/29/Serve-static-content/</url>
    <content><![CDATA[<p>Usually we put all the public content into <code>public</code> folder, including css, images etc. We should tell NodeJS to find the static folder.</p>
<span id="more"></span>

<h1 id="Get-root-path-of-our-project-folder"><a href="#Get-root-path-of-our-project-folder" class="headerlink" title="Get root path of our project folder"></a>Get root path of our project folder</h1><p>We need a module called <code>path</code> </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">module<span class="selector-class">.exports</span> = path<span class="selector-class">.dirname</span>(require<span class="selector-class">.main</span><span class="selector-class">.filename</span>);</span><br></pre></td></tr></table></figure>

<p>Then we can use this module for our root directory.</p>
<h1 id="Get-static-resources"><a href="#Get-static-resources" class="headerlink" title="Get static resources"></a>Get static resources</h1><p>For example, if we have file structure like this:</p>
<p><img src="/images/Serve-static-content-1.png" alt="Example file structure"></p>
<p> <code>shop.html</code> that contains a link to css file <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/main.css&quot;&gt;</code> and the css file is in public folder, we can’t access the css file by simply put public in front of the link like <code>/public/css/main.css</code> . </p>
<p>We should use express.static to tell NodeJS which folder is the static resource folder, then when the server sends file, it knows where to fetch the content. </p>
<p>In app.js, we need:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br></pre></td></tr></table></figure>

<p>When we call a module: </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(shopRoutes);</span><br></pre></td></tr></table></figure>

<p>And the module sends a html page:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.sendFile(path.join(rootDir, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;shop.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>This html page then can use the content of static folder</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/<span class="selector-tag">main</span><span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Project: IPv4 auto subnetting API</title>
    <url>/2022/01/28/Project-IPv4-auto-subnetting-API/</url>
    <content><![CDATA[<p>This is a review of my IPv4 knowledge that learnt two years ago. And This project will replace the old java command line program.<br>You should be able to see the source code here: <a href="https://github.com/roger-mengqiu-chen/ipv4subnetting">https://github.com/roger-mengqiu-chen/ipv4subnetting</a>.</p>
<p>You can try this web app here: <a href="https://ipv4-subnetting.herokuapp.com/">https://ipv4-subnetting.herokuapp.com/</a></p>
<span id="more"></span>

<h1 id="Using-this-API"><a href="#Using-this-API" class="headerlink" title="Using this API"></a>Using this API</h1><p>The API will handle IPv4 subnetting automatically. It also handles the invalid user input. If the amount of required subnet address is too large, API will return <code>&#39;Not enough address !&#39;</code>.</p>
<p>To send request to this API, you need follow the format as below:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;hostIp&quot;</span>:<span class="string">&quot;210.100.56.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mask&quot;</span>:<span class="string">&quot;255.255.255.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;subnets&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;net1&quot;</span>:<span class="number">2133</span>,</span><br><span class="line">        <span class="attr">&quot;net2&quot;</span>:<span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Within “subnets”, you need to mention the name of your subnet and the required amount of hosts within this subnet.<br>If the parent network has enough address, it will repond with JSON with following format:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;net2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ipAddress&quot;</span>: [</span><br><span class="line">            <span class="number">210</span>,</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            <span class="number">56</span>,</span><br><span class="line">            <span class="number">32</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;numberOfHosts&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="number">29</span>,</span><br><span class="line">        <span class="attr">&quot;mask&quot;</span>: [</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">248</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;allocatedAddresses&quot;</span>: <span class="number">8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;net1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ipAddress&quot;</span>: [</span><br><span class="line">            <span class="number">210</span>,</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            <span class="number">56</span>,</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;numberOfHosts&quot;</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="number">27</span>,</span><br><span class="line">        <span class="attr">&quot;mask&quot;</span>: [</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">224</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;allocatedAddresses&quot;</span>: <span class="number">32</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h1 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h1><h2 id="IPv4-network"><a href="#IPv4-network" class="headerlink" title="IPv4 network"></a><strong>IPv4 network</strong></h2><p>IPv4 is 32 bit long IP address. We can divide the address into 4 sections, each of which is 8 bit long. In human-readable format, we separate these sections with “.” (e.g., 192.168.1.1).<br><br>All of the IPv4 address can be converted to binary format: <br></p>
<p>For example, 192.168.1.1  can be written in 11000000.10101000.00000001.00000001<br></p>
<table>
    <th>Decimal </th><th> Binary </th>
    <tr><td>192 </td><td>1100 0000 </td></tr>
    <tr><td>168 </td><td>1010 0000 </td></tr>
    <tr><td>1   </td><td>0000 0001 </td></tr>
</table>

<h2 id="Prefix-and-subnet-mask"><a href="#Prefix-and-subnet-mask" class="headerlink" title="Prefix and subnet mask"></a><strong>Prefix and subnet mask</strong></h2><p>Prefix is the number of “1”s in IPv4 binary format address from left to right. It is used to describe which part is the network address (The part with all “1”s is the network portion). <br><br>For example, 192.168.1.1 /24<br>Prefix /24 can be written in binary format:<br>11111111 11111111 11111111 00000000<br>The first 24 bits are all “1”s.<br>To convert it to human-readable format, we use subnet mask:<br>255.255.255.0 </p>
<table>
<th>Decimal</th><th>Binary</th>
<tr><td>255</td><td>11111111</td></tr>
</table>


<h2 id="Determine-the-network"><a href="#Determine-the-network" class="headerlink" title="Determine the network"></a><strong>Determine the network</strong></h2><p>IPv4 address has two portions: network portion and host portion. To determine the network portion, use logical AND for each bit: <br><br>For example: 192.168.1.1 /24 </p>
<table>
    <th>Field</th><th> Value </th>
    <tr><td>IPv4 host   </td><td> 11000000 10101000 00000001 00000001 </td></tr>
    <tr><td>Subnet Mask </td><td> 11111111 11111111 11111111 00000000 </td></tr>
    <tr><td>Logical AND </td><td> 11000000 10101000 00000001 00000000 </td></tr>
</table>
The logical AND result is network address: 192.168.1.0 <br>
And the host portion is last ".1". (i.e., the last 8 bits of IPv4 binary address)
<br>

<h2 id="Assign-the-number-of-IP-addresses-according-to-the-number-of-hosts"><a href="#Assign-the-number-of-IP-addresses-according-to-the-number-of-hosts" class="headerlink" title="Assign the number of IP addresses according to the number of hosts"></a><strong>Assign the number of IP addresses according to the number of hosts</strong></h2><p>Each network has 2 reserved addresses: broadcast address and network address.</p>
<p>Broadcast address is the address with all “1”s in host portion (e.g., 192.168.1.0 /24 broadcast address is 192.168.1.255). </p>
<p>Network address is the address with all “0”s in host portion (e.g., 192.168.1.128 /25 network address is 192.168.1.128) </p>
<p>Each bit of the network address can hold 2 host addresses (0 and 1). When we allocate IP address for hosts, we caculate the required bits from right to left. </p>
<p>For example, if we want to take 6 addresses from 192.168.1.0 /24 network:</p>
<ul>
<li>Convert IP address to binary form: 11000000 10101000 00000001 00000000</li>
<li>6 ≈ 2^3, so 3 bits will be used</li>
<li>The rightmost 3 bits are the host part. The rest is network part</li>
<li>The prefix is 32 - 3 = 29. The mask is 11111111 11111111 11111111 11111000, which is 255.255.255.248 </li>
</ul>
<p>When we allocate addresses to hosts, remember to add broadcast and network address to the required number of hosts (i.e., 4 required hosts need at least 6 addresses).</p>
<h2 id="Divide-the-parent-network-according-to-the-required-number-of-host-addresses"><a href="#Divide-the-parent-network-according-to-the-required-number-of-host-addresses" class="headerlink" title="Divide the parent network according to the required number of host addresses"></a><strong>Divide the parent network according to the required number of host addresses</strong></h2><p>My strategy is sorting the subnets according to their size. Then allocate addresses from the biggest one.</p>
<p>For example, network address is 192.168.1.0 /24 and the table below is the required hosts for each network<br></p>
<table>
    <th>network name</th><th>hosts</th>
    <tr><td>network1</td><td>2</td></tr>
    <tr><td>network2</td><td>20</td></tr>
    <tr><td>network3</td><td>6</td></tr>
</table>

<p>Then we can allocate addresses as below: </p>
<table>
    <th> network name </th><th> allocated addresses </th><th> prefix </th>
    <tr><td>network2</td><td>32</td><td>27</td></tr>
    <tr><td>network3</td><td>8</td><td>29</td></tr>
    <tr><td>network1</td><td>4</td><td>30</td></tr>
</table>

<p>Finally, allocate network addresses from the biggest one </p>
<table>
    <th>network name </th><th>network address</th>
    <tr><td>network2</td><td>192.168.1.0 </td></tr>
    <tr><td>network3</td><td>192.168.1.32 </td></tr>
    <tr><td>network1</td><td>192.168.1.40 </td></tr>
</table>]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>IPv4</tag>
        <tag>REST</tag>
      </tags>
  </entry>
  <entry>
    <title>Some configurations of TypeScript project in VSCode</title>
    <url>/2022/04/12/Some-configurations-of-TypeScript-project-in-VSCode/</url>
    <content><![CDATA[<p>This post is about some configurations for TypeScript project in VSCode</p>
<span id="more"></span>

<h1 id="Install-typescript-globally"><a href="#Install-typescript-globally" class="headerlink" title="Install typescript globally:"></a>Install typescript globally:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install typescript -g</span><br></pre></td></tr></table></figure>

<h1 id="init-TypeScript-config"><a href="#init-TypeScript-config" class="headerlink" title="init TypeScript config:"></a>init TypeScript config:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run compile -- --init</span><br></pre></td></tr></table></figure>

<h1 id="watch-application-package-for-changes-Add-new-line-to-scripts-of-package-json-file"><a href="#watch-application-package-for-changes-Add-new-line-to-scripts-of-package-json-file" class="headerlink" title="watch application package for changes. Add new line to scripts of package.json file"></a>watch application package for changes. Add new line to scripts of package.json file</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">	<span class="attr">&quot;tsc&quot;</span>:<span class="string">&quot;tsc&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;watch&quot;</span>:<span class="string">&quot;tsc --watch&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="reload-browser-for-changes"><a href="#reload-browser-for-changes" class="headerlink" title="reload browser for changes:"></a>reload browser for changes:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install browser-sync--save-dev</span><br></pre></td></tr></table></figure>

<h1 id="Add-script"><a href="#Add-script" class="headerlink" title="Add script:"></a>Add script:</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;serve&quot;</span>:<span class="string">&quot;browser-sync start --server --watch&quot;</span></span><br></pre></td></tr></table></figure>

<p>Debugger configurations: launch application in chrome through port 3000</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;chrome&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Launch against localhost&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;webRoot&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Spread and rest operator</title>
    <url>/2022/01/24/Spread-and-rest-operator/</url>
    <content><![CDATA[<p>Spread operator <code>...</code> is used to unpack or “spread out” the elements of an array (or any other iterable object, such as string) in a context where individual values are expected.<br>Rest operator <code>...</code> is used to pack arguments of a function. </p>
<span id="more"></span>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;4213&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(...s)); <span class="comment">// print 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(...arr)); <span class="comment">// print 1</span></span><br></pre></td></tr></table></figure>

<p>Rest operator <code>...</code> is used to write functions that can be invoked with arbitrarily more arguments than parameters. </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">first=-<span class="literal">Infinity</span>, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> maxValue = first; <span class="comment">// Start by assuming the first arg is biggest</span></span><br><span class="line">    <span class="comment">// Then loop through the rest of the arguments, looking for bigger</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> n <span class="keyword">of</span> rest) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; maxValue) &#123;</span><br><span class="line">            maxValue = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Return the biggest</span></span><br><span class="line">    <span class="keyword">return</span> maxValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">max(<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1000</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)  <span class="comment">// =&gt; 1000</span></span><br></pre></td></tr></table></figure>

<p><strong>The spread operator for function call</strong></p>
<p>When we use <code>...</code> in function definition, it has the opposite effect to the spread operator. </p>
<p>Using <code>...</code> in a function definition gathers multiple function arguments into an array. Rest parameters and the spread operator are often useful together</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log (args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">// print &quot;[1,2,3,4]&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params">innerf</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...arg</span>) </span>&#123; <span class="comment">// ...arg is the arguments passed to f(innerf)</span></span><br><span class="line">        <span class="keyword">return</span> innerf(...arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerf</span>(<span class="params">...x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(...x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(innerf)(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">// print &quot;1 2 3 4&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Syntax</tag>
      </tags>
  </entry>
  <entry>
    <title>File handling in Node.js</title>
    <url>/2022/05/13/File-handling-in-Node-js/</url>
    <content><![CDATA[<p>There will be some files in our server. How do we handle them? </p>
<span id="more"></span>

<h1 id="Upload-file"><a href="#Upload-file" class="headerlink" title="Upload file"></a>Upload file</h1><p>Need package called multer</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save multer</span><br></pre></td></tr></table></figure>

<p>For the form that contains multiple types of data, use:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">enctype=&quot;multipart/form-data&quot;</span><br></pre></td></tr></table></figure>

<p>In app.js, we need to configure file storage:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fileStorage = multer.diskStorage(&#123;</span><br><span class="line">  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="string">&quot;images&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().toISOString() + <span class="string">&quot;-&quot;</span> + file.originalname);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Destination is the location where the file will be placed in server </p>
<p>Filename field can manipulate the file name of uploaded file to avoid duplication.</p>
<p>Then we need middleware:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(multer(&#123; <span class="attr">storage</span>: fileStorage &#125;).single(<span class="string">&#x27;image&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>This configure the name of the input and the target location.</p>
<p>Controller can get file directly from the request. Below is the controller:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.postUpload = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> img = req.file; <span class="comment">// Only has one file. </span></span><br><span class="line">  <span class="built_in">console</span>.log(img);</span><br><span class="line">  <span class="keyword">const</span> path = img.path;</span><br><span class="line">  <span class="keyword">const</span> title = img.originalname;</span><br><span class="line">  <span class="keyword">const</span> image = <span class="keyword">new</span> Image(&#123;</span><br><span class="line">    <span class="attr">title</span>: title,</span><br><span class="line">    <span class="attr">imagePath</span>: path</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(image);</span><br><span class="line"><span class="comment">// Below is using Mongoose to persist image. </span></span><br><span class="line">  image</span><br><span class="line">    .save()</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Image uploaded&quot;</span>);</span><br><span class="line">      res.redirect(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Serve-images"><a href="#Serve-images" class="headerlink" title="Serve images"></a>Serve images</h1><p>To serve images, we need configure static folder:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/images&#x27;</span>, express.static(path.join(__dirname, <span class="string">&#x27;images&#x27;</span>)));</span><br></pre></td></tr></table></figure>

<p>Why we need ‘/images’ path in middleware? Every time when we save files, the path is saved as <code>images/filename</code>. If we don’t have <code>/images</code> in our middleware, the server will look for filename directly because it assumes that the file is under root path. </p>
<h1 id="Download-file"><a href="#Download-file" class="headerlink" title="Download file"></a>Download file</h1><p>Assume that we have an invoice under data/invoice folder and we are going to download it from the server.  <code>fs</code> is the filesystem package of Node.js. We can set header for the response to indicate the content type of the file and how the file will be served. When the file is large, we should use stream (the second way) to serve file. </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">fs.readFile(invoicePath, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> next(err);</span><br><span class="line">  &#125;</span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/pdf&#x27;</span>);</span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Disposition&#x27;</span>, <span class="string">&#x27;inline; filename=&quot;&#x27;</span>+ invoiceName + <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">  res.send(data);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// The way of serving file as stream. </span></span><br><span class="line"><span class="keyword">const</span> file = fs.createReadStream(invoicePath);</span><br><span class="line">res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/pdf&#x27;</span>);</span><br><span class="line">res.setHeader(<span class="string">&#x27;Content-Disposition&#x27;</span>, <span class="string">&#x27;inline; filename=&quot;&#x27;</span>+ invoiceName + <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">file.pipe(res);</span><br></pre></td></tr></table></figure>

<h1 id="Delete-file"><a href="#Delete-file" class="headerlink" title="Delete file"></a>Delete file</h1><p>To delete files, we need a helper module:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deleteFile = <span class="function">(<span class="params">filePath</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.unlink(filePath, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> (err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.deleteFile = deleteFile;</span><br></pre></td></tr></table></figure>

<p>Then we can use it directly in our module:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product.imageUrl is the file path of this file</span></span><br><span class="line">fileHelper.deleteFile(product.imageUrl);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>File handling</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT in Node.js</title>
    <url>/2022/05/18/JWT-in-Node-js/</url>
    <content><![CDATA[<p>JWT is JSON Web Token. It is given to the client when it is successfully authenticated. The token is stored inside the application local storage. Every time when the client sends requests, it should attach this token (usually in header) to prove its identity/authority to the server. </p>
<span id="more"></span>

<p>To implement JWT in Nodejs, we need jsonwebtoken package</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm install --save jsonwebtoken</span><br></pre></td></tr></table></figure>

<h1 id="Front-end"><a href="#Front-end" class="headerlink" title="Front end"></a>Front end</h1><p>We assume that the client is going to fetch posts from server:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;http://localhost:8080/feed/posts&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="attr">Authorization</span>: <span class="string">&quot;Bearer &quot;</span> + <span class="built_in">this</span>.props.token</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Headers should contain ‘Authorization’ field. “Bearer” is the conventional start of JWT. </p>
<p>This will put JWT from local storage inside header of this request.</p>
<h1 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h1><p>When user login, server should generate the token for the client:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> token = jwt.sign(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">email</span>: loadedUser.email,</span><br><span class="line">    <span class="attr">userId</span>: loadedUser._id.toString()</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&#x27;secret&#x27;</span>, </span><br><span class="line">  &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;1h&#x27;</span> &#125; <span class="comment">// after 1 hour, the token becomes invalid</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>This will put user email and id inside the token. Never put password inside!</p>
<p>It also sets the “secret” for decoding the token. Never expose the key when putting the source code online!</p>
<p>We need a middleware “is-auth” for authentication:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> authHeader = req.get(<span class="string">&#x27;Authorization&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(!authHeader) &#123;</span><br><span class="line">    <span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Not authenticated&quot;</span>);</span><br><span class="line">    error.stack= <span class="number">401</span>;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> token = authHeader.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">let</span> decodedToken;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    decodedToken = jwt.verify(token, <span class="string">&#x27;secret&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    err.statusCode = <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!decodedToken) &#123;</span><br><span class="line">    <span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">Error</span> (<span class="string">&quot;Not authenticated&quot;</span>);</span><br><span class="line">    error.statusCode = <span class="number">401</span>;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">  req.userId = decodedToken.userId;</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then we should use the authentication middleware in router:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/posts&#x27;</span>, isAuth, feedController.getPosts);</span><br></pre></td></tr></table></figure>
<p>When the client sends request, the request will be checked with its header. If the request has valid token, it will be passed to the controller. </p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Security</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Simple tasks web app</title>
    <url>/2022/06/10/Simple-tasks-web-app/</url>
    <content><![CDATA[<img style="height: 250px;" src="https://user-images.githubusercontent.com/9221441/173171529-04616d65-c383-4480-a865-3cdd250e7d97.png"/>

<p>This is a walk through about how I build a simple task management web application. The framework used here is React. I didn't use any CSS framework. The application can add tasks and delete tasks. There should be more features coming to this app (e.g., user login, database of tasks etc.).
The finished app can be visited through: <a href="https://cr-tasks-app.herokuapp.com/">https://cr-tasks-app.herokuapp.com/</a></p>

<span id="more"></span>

<h1 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h1><p>The app should contain a form for user to input task one by one. It also contains a list to display all the tasks owned by this user.</p>
<p>The structure of this app is as below (All the css files are omitted):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Components</span><br><span class="line">- UI</span><br><span class="line">  - Button</span><br><span class="line">    - Button.js</span><br><span class="line">- TaskForm</span><br><span class="line">  - TaskForm.js</span><br><span class="line">- TaskItem</span><br><span class="line">  - TaskItem.js</span><br><span class="line">- TaskList</span><br><span class="line">  - TaskList.js</span><br><span class="line">- App.js</span><br><span class="line">- index.js</span><br></pre></td></tr></table></figure>

<h1 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h1><p>Button is the simplest component of this app. So I started from here.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#123;props.type&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;props.children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button;</span><br></pre></td></tr></table></figure>

<p>Button component should have type, onClick function, and the content of this button. All of these values will be provided when being used.</p>
<h1 id="TaskForm"><a href="#TaskForm" class="headerlink" title="TaskForm"></a>TaskForm</h1><p>Form is one of the major parts of this app. It reads user’s input and validate it before submitting itself. The form should have a value to hold user input and a flag to indicate if the input is valid.</p>
<p>The code for this part is:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TaskForm = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [ctn, setCtn] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [isValid, setIsValid] = useState(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> submitHandler = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ctn.trim().length === <span class="number">0</span>) &#123;</span><br><span class="line">      setIsValid(<span class="literal">false</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    props.onAddTask(ctn);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> inputHandler = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.target.value.trim().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      setIsValid(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setCtn(event.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&quot;<span class="attr">task-form</span>&quot;]&#125; <span class="attr">onSubmit</span>=<span class="string">&#123;submitHandler&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">styles</span>[&quot;<span class="attr">task-input</span>&quot;]&#125; $&#123;!<span class="attr">isValid</span> &amp;&amp; <span class="attr">styles.invalid</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">onChange</span>=<span class="string">&#123;inputHandler&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      &gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Add Task<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TaskForm;</span><br></pre></td></tr></table></figure>

<p>The input loads <code>inputHandler</code> to read user input and set the value of input to ctn.</p>
<p>The form loads <code>onSubmit</code> function called <code>submitHandler</code>, which checks user input. If the input is valid (not empty), the handler will pass the content to its parent (App.js). If the input is invalid, set the isValid to false.</p>
<p>I also load different styles for the input. To save time, I won’t go through the css file here.</p>
<h1 id="TaskList"><a href="#TaskList" class="headerlink" title="TaskList"></a>TaskList</h1><p>To display all the tasks, I made a list for them:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TaskList = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&quot;<span class="attr">task-list</span>&quot;]&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;props.tasks.map((task) =&gt; (</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">TaskItem</span> <span class="attr">key</span>=<span class="string">&#123;task.id&#125;</span> <span class="attr">id</span>=<span class="string">&#123;task.id&#125;</span> <span class="attr">onDelete</span>=<span class="string">&#123;props.onDeleteTask&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;task.task&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">TaskItem</span>&gt;</span></span></span><br><span class="line"><span class="xml">      ))&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TaskList;</span><br></pre></td></tr></table></figure>

<p>The component will receive tasks from its parent and loop through the tasks to create single <code>TaskItem</code> on page. Each <code>TaskItem</code> will have key, id, and <code>onDelete</code> function.</p>
<h1 id="TaskItem"><a href="#TaskItem" class="headerlink" title="TaskItem"></a>TaskItem</h1><p>For each single task, I made it clickable:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TaskItem = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> deleteHandler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    props.onDelete(props.id);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&quot;<span class="attr">task-item</span>&quot;]&#125; <span class="attr">onClick</span>=<span class="string">&#123;deleteHandler&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;props.children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TaskItem;</span><br></pre></td></tr></table></figure>
<p>Every time when user clicks on the single task, the component will pass task id to its parent.</p>
<h1 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h1><p>Finally, I finished the App.js, which loads a default list and handles create/delete functions. Here is the code:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [tasks, setTasks] = useState([</span><br><span class="line">    &#123;<span class="attr">task</span>: <span class="string">&#x27;Do exercise&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">task</span>: <span class="string">&#x27;Finish the course&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>&#125;</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> deleteTaskHandler = <span class="function"><span class="params">taskId</span> =&gt;</span> &#123;</span><br><span class="line">    setTasks(<span class="function"><span class="params">prevTasks</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> updatedTasks = prevTasks.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.id !== taskId);</span><br><span class="line">      <span class="keyword">return</span> updatedTasks;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> addTaskHandler = <span class="function"><span class="params">task</span> =&gt;</span> &#123;</span><br><span class="line">    setTasks(<span class="function"><span class="params">prevTasks</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> updatedTasks = [...prevTasks];</span><br><span class="line">      updatedTasks.unshift(&#123;<span class="attr">task</span>: task, <span class="attr">id</span>: <span class="built_in">Math</span>.random().toString()&#125;);</span><br><span class="line">      <span class="keyword">return</span> updatedTasks;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> content = (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;textAlign:</span> &#x27;<span class="attr">center</span>&#x27;&#125;&#125;&gt;</span>No task found<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(tasks.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    content = (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">TaskList</span> <span class="attr">tasks</span>=<span class="string">&#123;tasks&#125;</span> <span class="attr">onDeleteTask</span>=<span class="string">&#123;deleteTaskHandler&#125;</span> /&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">TaskForm</span> <span class="attr">onAddTask</span>=<span class="string">&#123;addTaskHandler&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;content&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This component also checks if the list is empty and displays content accordingly.</p>
<p><strong>Attention</strong>: when I set task id, I used <code>Math.random()</code>, which is not recommended for key. This will be changed in the future.</p>
<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>This is how I built this simple application. You can check the app through the link mentioned at the beginning of this post. GitHub link is here: <a href="https://github.com/roger-mengqiu-chen/simpletasks">https://github.com/roger-mengqiu-chen/simpletasks</a>.</p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
</search>
