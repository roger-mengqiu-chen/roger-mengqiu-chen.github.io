<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Creating a server with NodeJS</title>
    <url>/2022/01/25/Creating-a-server-with-NodeJS/</url>
    <content><![CDATA[<p>To create a server, we need http module. The application also should keep running with listening to a port. </p>
<p>We also need write some code to deal with received request and sending response. </p>
<span id="more"></span>

<h1 id="Creating"><a href="#Creating" class="headerlink" title="Creating"></a>Creating</h1><p>Example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rqListener</span>(<span class="params">req, res</span>) </span>&#123; <span class="comment">// using req, res is common practice</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.url, req.method, req.headers);</span><br><span class="line">		<span class="comment">// process.exit(); // close down the server once print the result</span></span><br><span class="line">		res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>); <span class="comment">// attach a header to response, telling the type is html</span></span><br><span class="line">    res.write(<span class="string">&#x27;&lt;html&gt;&#x27;</span>);</span><br><span class="line">    res.write(<span class="string">&#x27;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&#x27;</span>);</span><br><span class="line">    res.write(<span class="string">&#x27;&lt;body&gt;&lt;h1&gt;hello&lt;/h1&gt;&lt;/body&gt;&#x27;</span>);</span><br><span class="line">    res.write(<span class="string">&#x27;&lt;/html&gt;&#x27;</span>);</span><br><span class="line">    res.end(); <span class="comment">// This is the end; content after this point won&#x27;t be sent</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(rqListener); <span class="comment">// have to pass a callback function when create a server</span></span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>); <span class="comment">// this will keep running</span></span><br></pre></td></tr></table></figure>

<p>These codes will send a page with title as “Test” and content-type is “text/html” </p>
<h1 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h1><p>We can add some if statements to handle the request and send response accordingly.</p>
<p>Example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = req.url;</span><br><span class="line">    <span class="keyword">const</span> method = req.method;</span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>); <span class="comment">// attach a header to response, telling the type is html</span></span><br><span class="line">        res.write(<span class="string">&#x27;&lt;html&gt;&#x27;</span>);</span><br><span class="line">        res.write(<span class="string">&#x27;&lt;head&gt;&lt;title&gt;Enter message&lt;/title&gt;&lt;/head&gt;&#x27;</span>);</span><br><span class="line">        res.write(<span class="string">&#x27;&lt;body&gt;&lt;form action=&quot;/message&quot; method=&quot;POST&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;message&quot;&gt;&lt;button type=&quot;submit&quot;&gt;Send&lt;/button&gt;&lt;/form&gt;&lt;/body&gt;&#x27;</span>);</span><br><span class="line">        res.write(<span class="string">&#x27;&lt;/html&gt;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.end(); <span class="comment">// This is the end; content after this point won&#x27;t be sent</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>These code will send back a form with input box to user when user sends request</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (url === <span class="string">&#x27;/message&#x27;</span> &amp;&amp; method === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        fs.writeFileSync(<span class="string">&#x27;message.txt&#x27;</span>, <span class="string">&#x27;dummy&#x27;</span>);</span><br><span class="line">        res.statusCode = <span class="number">302</span>;</span><br><span class="line">        res.setHeader(<span class="string">&#x27;Location&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The code above will see if user send ‘/message’ POST request. If so, create a file called ‘message.txt’ and save ‘dummy’ into that file. Then return code 302 and redirect page to ‘ localhost:port/ ’.  </p>
<h1 id="Parsing-request-data"><a href="#Parsing-request-data" class="headerlink" title="Parsing request data"></a>Parsing request data</h1><p>We can set event listener on request with <code>on</code>. </p>
<p>For example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> body = [];</span><br><span class="line"><span class="comment">// listen on data event</span></span><br><span class="line">req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(chunk);</span><br><span class="line">    body.push(chunk);</span><br><span class="line">    <span class="built_in">console</span>.log(body);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// listen on end event</span></span><br><span class="line">req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parsedBody = Buffer.concat(body).toString();</span><br><span class="line">    <span class="built_in">console</span>.log(parsedBody); <span class="comment">// print message=...</span></span><br><span class="line">    <span class="keyword">const</span> message = parsedBody.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]; <span class="comment">// get content after = </span></span><br><span class="line">    fs.writeFileSync(<span class="string">&#x27;message.txt&#x27;</span>, message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>The <code>&#39;data&#39;</code> event emits either a <code>Buffer</code> (by default) or a string if <code>setEncoding()</code> was used.</p>
<p>In the code above, when the event happens, print out the chunk of this data and push it into an array. </p>
<p>The <code>&#39;end&#39;</code> event is emitted when the stream has received an EOF (FIN in TCP terminology). Indicates that no more <code>&#39;data&#39;</code> events will happen. If the stream is also writable, it may be possible to continue writing.</p>
<p>In the code above, the data is stored in a text file.</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Express basic routing</title>
    <url>/2022/01/26/Express-basic-routing/</url>
    <content><![CDATA[<p>Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. In express, everything is middleware.</p>
<span id="more"></span>

<p><a href="https://expressjs.com/en/api.html#express">Express 4.x API</a></p>
<h1 id="Install-express"><a href="#Install-express" class="headerlink" title="Install express:"></a>Install express:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save express</span><br></pre></td></tr></table></figure>

<h1 id="Basic-request-response-handling"><a href="#Basic-request-response-handling" class="headerlink" title="Basic request/response handling"></a>Basic request/response handling</h1><p>Let’s create a simple routing here: </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>); <span class="comment">// check the source code, it exports a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; <span class="comment">// use add a middleware to the stack</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;in the middleware&#x27;</span>);</span><br><span class="line">  next(); <span class="comment">// allows the request to continue to the next middleware</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;in another middleware&#x27;</span>);</span><br><span class="line">  res.send(<span class="string">&#x27;&lt;h1&gt;hello from express&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>After running the code above, got to “localhost:3000”, we will get “hello from express” in the browser and two messages in console. </p>
<p>We can add some specific path for handling. For example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/path&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;...&#125;);</span><br></pre></td></tr></table></figure>

<p>The default path is <code>/</code>, if we don’t specify any path here</p>
<p>NodeJS parse from top to bottom, if one function doesn’t have <code>next()</code> in its body, it will block the code and request won’t go to the next function. For example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use (<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;always run&#x27;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/add-product&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;in another middleware&#x27;</span>);</span><br><span class="line">  res.send(<span class="string">&#x27;&lt;h1&gt;Add product&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>When we send request <code>‘/add-product’</code>, The first <code>app.use()</code> has <code>next()</code>, so the second one will be reached and send response back. If the first one doesn’t have <code>next()</code> , the second one won’t be executed, the page will keep loading because there’s no response sent back. </p>
<p>To parse request body, we need package called body-parser</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save body-parser</span><br></pre></td></tr></table></figure>

<p>And use bodyParser before all the middlewares</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br></pre></td></tr></table></figure>

<p><code>app.use</code> will handle all types of requests. To handle POST request particularly, just change <code>use</code> to <code>post</code>. </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/path&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;...&#125;);</span><br></pre></td></tr></table></figure>

<p>To handle other http requests, we just need to change it to <code>put</code>, <code>get</code>, etc.  </p>
<h1 id="Express-routing"><a href="#Express-routing" class="headerlink" title="Express routing"></a>Express routing</h1><p>We can construct some modules to improve reusability:</p>
<p>For example, we can make an admin module to handle get request <code>/add-product</code> to get form data for adding product and post request <code>/product</code> to post form data:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="comment">// below will get a form </span></span><br><span class="line">router.get(<span class="string">&#x27;/add-product&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;&lt;form action=&quot;/product&quot; method=&quot;POST&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;&lt;button type=&quot;submit&quot;&gt;Add product&lt;/button&gt;&lt;/form&gt;&#x27;</span>);</span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">// below will post the form data</span></span><br><span class="line">router.post(<span class="string">&#x27;/product&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body);</span><br><span class="line">  res.redirect(<span class="string">&#x27;/&#x27;</span>); <span class="comment">// once print out the body of request, redirect to /</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>

<p>Then we can use this module in our entry point (<code>app.js</code> for this example):</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> adminRoutes = <span class="built_in">require</span>(<span class="string">&#x27;./admin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.use(adminRoutes);</span><br><span class="line">app.listen(<span class="number">3000</span>); <span class="comment">// this will create server and listen on 3000</span></span><br></pre></td></tr></table></figure>

<h2 id="Difference-between-app-use-and-router-get"><a href="#Difference-between-app-use-and-router-get" class="headerlink" title="Difference between app.use() and router.get()"></a>Difference between <code>app.use()</code> and <code>router.get()</code></h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/first&#x27;</span>, router); <span class="comment">// mount the router as middleware at path /first</span></span><br><span class="line">router.get(<span class="string">&#x27;/sud&#x27;</span>, smaller);</span><br><span class="line">router.get(<span class="string">&#x27;/user&#x27;</span>, bigger);</span><br></pre></td></tr></table></figure>

<p>When sending <code>/first/sud</code> smaller function will be called.</p>
<p>If you open <code>/first/user</code>, then the <code>bigger</code> function will get called.</p>
<p><code>app</code> mounts middleware first, <code>router</code> set subpath accordingly</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/first&#x27;</span>, fun);</span><br><span class="line">app.get(<span class="string">&#x27;/sud&#x27;</span>, bigger);</span><br><span class="line">app.get(<span class="string">&#x27;/user&#x27;</span>, smaller);</span><br></pre></td></tr></table></figure>

<p>In the code above, functions will be called at <code>/first</code>, <code>/sud</code>, <code>/user</code>. </p>
<p>If we call <code>/first/sud</code>, there’s no response.</p>
<h1 id="Filtering-paths"><a href="#Filtering-paths" class="headerlink" title="Filtering paths"></a>Filtering paths</h1><p>If request type is different, it can have the same path. For example</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/add-product&#x27;</span>...)</span><br><span class="line">router.post(<span class="string">&#x27;/add-product&#x27;</span>...)</span><br></pre></td></tr></table></figure>

<p><code>app.use</code>  can have filtering path</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, adminRouters) </span><br></pre></td></tr></table></figure>

<p>If we have <code>route.get(’/add-product’ ...)</code> within adminRouters, we need send request <code>‘/admin/add-product’</code> to get result.</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>Server</tag>
        <tag>Routing</tag>
      </tags>
  </entry>
  <entry>
    <title>Callback vs Promise vs Async</title>
    <url>/2022/01/25/Callback-vs-Promise-vs-Async/</url>
    <content><![CDATA[<p>When passing a function to another function as a parameter, the passed function is called callback function.</p>
<blockquote>
<p>A <strong><code>Promise</code></strong> is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action’s eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a <em>promise</em> to supply the value at some point in the future.</p>
</blockquote>
<span id="more"></span>

<p><img src="/images/callback-promise-async1.png" alt="How promise works"></p>
<p>An async function is a function declared with the <code>async</code> keyword, and the <code>await</code> keyword is permitted within it. The <code>async</code> and <code>await</code> keywords enable asynchronous, promise-based behaviour to be written in a cleaner style, avoiding the need to explicitly configure promise chains.</p>
<p>To explain these three concepts, we can use example provided in </p>
<p><a href="https://www.youtube.com/watch?v=PoRJizFvM7s">https://www.youtube.com/watch?v=PoRJizFvM7s</a></p>
<p>If we have posts:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">    &#123;<span class="attr">title</span>: <span class="string">&#x27;post 1&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;this is post one&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">title</span>: <span class="string">&#x27;post 2&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;this is post two&#x27;</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>And <code>getPosts</code> function:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        posts.forEach(<span class="function">(<span class="params">post</span>) =&gt;</span> &#123;</span><br><span class="line">            output += <span class="string">`&lt;li&gt;<span class="subst">$&#123;post.title&#125;</span>&lt;/li&gt;`</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">document</span>.body.innerHTML = output;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Callback-example"><a href="#Callback-example" class="headerlink" title="Callback example:"></a>Callback example:</h1><p>We can have a function to create post:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPost</span>(<span class="params">post, callback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        posts.push(post);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>callback()</code> has to be inside of <code>setTimeout()</code> , otherwise, <code>callback()</code> will run without waiting <code>post.push()</code>. This is the feature of async programming. </p>
<p>Then we can trigger <code>createPost()</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">createPost(&#123;<span class="attr">title</span>: <span class="string">&#x27;post 3&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;this is post three&#x27;</span>&#125;, getPosts);</span><br></pre></td></tr></table></figure>

<p>You will see “post 1” and “post 2” first and then 2 seconds later, “post 3” shows up. </p>
<h1 id="Promise-example"><a href="#Promise-example" class="headerlink" title="Promise example:"></a>Promise example:</h1><p>We can modify <code>createPost</code> to make it return promise:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPost</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="comment">// has to have 2 parameters to indicate callback functions to handle resolve and reject</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            posts.push(post);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> error = <span class="literal">false</span>; </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="string">&#x27;Error !&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then call the function:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">createPost(&#123; <span class="attr">title</span>: <span class="string">&#x27;post 3&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;this is post three&#x27;</span>&#125;)</span><br><span class="line">    .then(getPosts)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure>

<p>This has the same effect as using callback function mentioned above. </p>
<p>If we change <code>error</code> to <code>true</code> in <code>createPost</code> , the <code>catch</code> will handle the error, which is <code>console.log</code>.</p>
<p>In addition, we can handle multiple promises:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> </span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>, <span class="string">&#x27;goodbye&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> promise4 = fetch(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2, promise3])</span><br><span class="line">	.then(<span class="function">(<span class="params">values</span>) =&gt;</span> <span class="built_in">console</span>.log(values)); </span><br></pre></td></tr></table></figure>

<p>Result:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>, <span class="string">&#x27;goodbye&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h1 id="Async-example"><a href="#Async-example" class="headerlink" title="Async example:"></a>Async example:</h1><p>Async function is more elegant. So we don’t need <code>.then()</code> of promise. <code>createPost</code> function is the same as the previous one. Then, we need the keyword <code>async</code> before the function that triggers <code>createPost</code> and <code>getPosts</code>. And put <code>await</code> before the function <code>createPost</code> which needs to be waited until completed. </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> createPost(&#123; <span class="attr">title</span>: <span class="string">&#x27;post 3&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;this is post three&#x27;</span>&#125;);</span><br><span class="line">    getPosts();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init();</span><br></pre></td></tr></table></figure>

<p><code>init</code> will start <code>createPost</code>.  Once <code>createPost</code> is completed, it will trigger <code>getPosts</code></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Syntax</tag>
        <tag>Async</tag>
      </tags>
  </entry>
  <entry>
    <title>Project: IPv4 auto subnetting API</title>
    <url>/2022/01/28/Project-IPv4-auto-subnetting-API/</url>
    <content><![CDATA[<p>This is a review of my IPv4 knowledge that learnt two years ago. And This project will replace the old java command line program.<br>You should be able to see the source code here: <a href="https://github.com/roger-mengqiu-chen/ipv4subnetting">https://github.com/roger-mengqiu-chen/ipv4subnetting</a>.</p>
<p>You can try this web app here: <a href="https://ipv4-subnetting.herokuapp.com/">https://ipv4-subnetting.herokuapp.com/</a></p>
<span id="more"></span>

<h1 id="Using-this-API"><a href="#Using-this-API" class="headerlink" title="Using this API"></a>Using this API</h1><p>The API will handle IPv4 subnetting automatically. It also handles the invalid user input. If the amount of required subnet address is too large, API will return <code>&#39;Not enough address !&#39;</code>.</p>
<p>To send request to this API, you need follow the format as below:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;hostIp&quot;</span>:<span class="string">&quot;210.100.56.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mask&quot;</span>:<span class="string">&quot;255.255.255.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;subnets&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;net1&quot;</span>:<span class="number">2133</span>,</span><br><span class="line">        <span class="attr">&quot;net2&quot;</span>:<span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Within “subnets”, you need to mention the name of your subnet and the required amount of hosts within this subnet.<br>If the parent network has enough address, it will repond with JSON with following format:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;net2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ipAddress&quot;</span>: [</span><br><span class="line">            <span class="number">210</span>,</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            <span class="number">56</span>,</span><br><span class="line">            <span class="number">32</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;numberOfHosts&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="number">29</span>,</span><br><span class="line">        <span class="attr">&quot;mask&quot;</span>: [</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">248</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;allocatedAddresses&quot;</span>: <span class="number">8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;net1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ipAddress&quot;</span>: [</span><br><span class="line">            <span class="number">210</span>,</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            <span class="number">56</span>,</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;numberOfHosts&quot;</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="number">27</span>,</span><br><span class="line">        <span class="attr">&quot;mask&quot;</span>: [</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">224</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;allocatedAddresses&quot;</span>: <span class="number">32</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h1 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h1><h2 id="IPv4-network"><a href="#IPv4-network" class="headerlink" title="IPv4 network"></a><strong>IPv4 network</strong></h2><p>IPv4 is 32 bit long IP address. We can divide the address into 4 sections, each of which is 8 bit long. In human-readable format, we separate these sections with “.” (e.g., 192.168.1.1).<br><br>All of the IPv4 address can be converted to binary format: <br></p>
<p>For example, 192.168.1.1  can be written in 11000000.10101000.00000001.00000001<br></p>
<table>
    <th>Decimal </th><th> Binary </th>
    <tr><td>192 </td><td>1100 0000 </td></tr>
    <tr><td>168 </td><td>1010 0000 </td></tr>
    <tr><td>1   </td><td>0000 0001 </td></tr>
</table>

<h2 id="Prefix-and-subnet-mask"><a href="#Prefix-and-subnet-mask" class="headerlink" title="Prefix and subnet mask"></a><strong>Prefix and subnet mask</strong></h2><p>Prefix is the number of “1”s in IPv4 binary format address from left to right. It is used to describe which part is the network address (The part with all “1”s is the network portion). <br><br>For example, 192.168.1.1 /24<br>Prefix /24 can be written in binary format:<br>11111111 11111111 11111111 00000000<br>The first 24 bits are all “1”s.<br>To convert it to human-readable format, we use subnet mask:<br>255.255.255.0 </p>
<table>
<th>Decimal</th><th>Binary</th>
<tr><td>255</td><td>11111111</td></tr>
</table>


<h2 id="Determine-the-network"><a href="#Determine-the-network" class="headerlink" title="Determine the network"></a><strong>Determine the network</strong></h2><p>IPv4 address has two portions: network portion and host portion. To determine the network portion, use logical AND for each bit: <br><br>For example: 192.168.1.1 /24 </p>
<table>
    <th>Field</th><th> Value </th>
    <tr><td>IPv4 host   </td><td> 11000000 10101000 00000001 00000001 </td></tr>
    <tr><td>Subnet Mask </td><td> 11111111 11111111 11111111 00000000 </td></tr>
    <tr><td>Logical AND </td><td> 11000000 10101000 00000001 00000000 </td></tr>
</table>
The logical AND result is network address: 192.168.1.0 <br>
And the host portion is last ".1". (i.e., the last 8 bits of IPv4 binary address)
<br>

<h2 id="Assign-the-number-of-IP-addresses-according-to-the-number-of-hosts"><a href="#Assign-the-number-of-IP-addresses-according-to-the-number-of-hosts" class="headerlink" title="Assign the number of IP addresses according to the number of hosts"></a><strong>Assign the number of IP addresses according to the number of hosts</strong></h2><p>Each network has 2 reserved addresses: broadcast address and network address.</p>
<p>Broadcast address is the address with all “1”s in host portion (e.g., 192.168.1.0 /24 broadcast address is 192.168.1.255). </p>
<p>Network address is the address with all “0”s in host portion (e.g., 192.168.1.128 /25 network address is 192.168.1.128) </p>
<p>Each bit of the network address can hold 2 host addresses (0 and 1). When we allocate IP address for hosts, we caculate the required bits from right to left. </p>
<p>For example, if we want to take 6 addresses from 192.168.1.0 /24 network:</p>
<ul>
<li>Convert IP address to binary form: 11000000 10101000 00000001 00000000</li>
<li>6 ≈ 2^3, so 3 bits will be used</li>
<li>The rightmost 3 bits are the host part. The rest is network part</li>
<li>The prefix is 32 - 3 = 29. The mask is 11111111 11111111 11111111 11111000, which is 255.255.255.248 </li>
</ul>
<p>When we allocate addresses to hosts, remember to add broadcast and network address to the required number of hosts (i.e., 4 required hosts need at least 6 addresses).</p>
<h2 id="Divide-the-parent-network-according-to-the-required-number-of-host-addresses"><a href="#Divide-the-parent-network-according-to-the-required-number-of-host-addresses" class="headerlink" title="Divide the parent network according to the required number of host addresses"></a><strong>Divide the parent network according to the required number of host addresses</strong></h2><p>My strategy is sorting the subnets according to their size. Then allocate addresses from the biggest one.</p>
<p>For example, network address is 192.168.1.0 /24 and the table below is the required hosts for each network<br></p>
<table>
    <th>network name</th><th>hosts</th>
    <tr><td>network1</td><td>2</td></tr>
    <tr><td>network2</td><td>20</td></tr>
    <tr><td>network3</td><td>6</td></tr>
</table>

<p>Then we can allocate addresses as below: </p>
<table>
    <th> network name </th><th> allocated addresses </th><th> prefix </th>
    <tr><td>network2</td><td>32</td><td>27</td></tr>
    <tr><td>network3</td><td>8</td><td>29</td></tr>
    <tr><td>network1</td><td>4</td><td>30</td></tr>
</table>

<p>Finally, allocate network addresses from the biggest one </p>
<table>
    <th>network name </th><th>network address</th>
    <tr><td>network2</td><td>192.168.1.0 </td></tr>
    <tr><td>network3</td><td>192.168.1.32 </td></tr>
    <tr><td>network1</td><td>192.168.1.40 </td></tr>
</table>]]></content>
      <categories>
        <category>Java</category>
        <category>Project</category>
      </categories>
      <tags>
        <tag>IPv4</tag>
        <tag>REST</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Serve static content</title>
    <url>/2022/01/29/Serve-static-content/</url>
    <content><![CDATA[<p>Usually we put all the public content into <code>public</code> folder, including css, images etc. We should tell NodeJS to find the static folder.</p>
<span id="more"></span>

<h1 id="Get-root-path-of-our-project-folder"><a href="#Get-root-path-of-our-project-folder" class="headerlink" title="Get root path of our project folder"></a>Get root path of our project folder</h1><p>We need a module called <code>path</code> </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">module<span class="selector-class">.exports</span> = path<span class="selector-class">.dirname</span>(require<span class="selector-class">.main</span><span class="selector-class">.filename</span>);</span><br></pre></td></tr></table></figure>

<p>Then we can use this module for our root directory.</p>
<h1 id="Get-static-resources"><a href="#Get-static-resources" class="headerlink" title="Get static resources"></a>Get static resources</h1><p>For example, if we have file structure like this:</p>
<p><img src="/images/Serve-static-content-1.png" alt="Example file structure"></p>
<p> <code>shop.html</code> that contains a link to css file <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/main.css&quot;&gt;</code> and the css file is in public folder, we can’t access the css file by simply put public in front of the link like <code>/public/css/main.css</code> . </p>
<p>We should use express.static to tell NodeJS which folder is the static resource folder, then when the server sends file, it knows where to fetch the content. </p>
<p>In app.js, we need:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br></pre></td></tr></table></figure>

<p>When we call a module: </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.use(shopRoutes);</span><br></pre></td></tr></table></figure>

<p>And the module sends a html page:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.sendFile(path.join(rootDir, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;shop.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>This html page then can use the content of static folder</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/<span class="selector-tag">main</span><span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript function</title>
    <url>/2022/01/24/JavaScript-function/</url>
    <content><![CDATA[<p>JS functions are parameterized. They have a list of identifiers, known as parameters, that work as local variables for the body of the function. </p>
<p>In addition to the arguments, each invocation has another value — the invocation context: the value of <code>this</code> keyword. </p>
<p>It’s a good idea to use <code>const</code> for function name. </p>
<p>Function defined with expressions can’t be invoked before they are defined. </p>
<span id="more"></span>

<p>Example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(hello1());</span><br><span class="line"><span class="built_in">console</span>.log(hello2());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hello2 will throw exception as it&#x27;s called before initialization</span></span><br><span class="line"><span class="keyword">const</span> hello2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>In short, with arrow functions there are no binding of <code>this</code>.</p>
<p>In regular functions the <code>this</code> keyword represented the object that called the function, which could be the window, the document, a button or whatever.</p>
<p>With arrow functions the <code>this</code> keyword <em>always</em> represents the object that defined the arrow function.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.name = <span class="string">&quot;global&quot;</span>; <span class="comment">// In nodejs, there&#x27;s no global variable called window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;jason&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">shout</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;my name is &quot;</span>, <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">shout2</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;my name is &quot;</span>, <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Shorter syntax</span></span><br><span class="line">    <span class="function"><span class="title">shout3</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;my name is &quot;</span>, <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.shout();  <span class="comment">// &quot;jason&quot;</span></span><br><span class="line">person.shout2(); <span class="comment">// &quot;global&quot;</span></span><br><span class="line">person.shout3(); <span class="comment">// &quot;jason&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Syntax</tag>
      </tags>
  </entry>
  <entry>
    <title>Spread and rest operator</title>
    <url>/2022/01/24/Spread-and-rest-operator/</url>
    <content><![CDATA[<p>Spread operator <code>...</code> is used to unpack or “spread out” the elements of an array (or any other iterable object, such as string) in a context where individual values are expected.<br>Rest operator <code>...</code> is used to pack arguments of a function. </p>
<span id="more"></span>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;4213&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(...s)); <span class="comment">// print 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(...arr)); <span class="comment">// print 1</span></span><br></pre></td></tr></table></figure>

<p>Rest operator <code>...</code> is used to write functions that can be invoked with arbitrarily more arguments than parameters. </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">first=-<span class="literal">Infinity</span>, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> maxValue = first; <span class="comment">// Start by assuming the first arg is biggest</span></span><br><span class="line">    <span class="comment">// Then loop through the rest of the arguments, looking for bigger</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> n <span class="keyword">of</span> rest) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; maxValue) &#123;</span><br><span class="line">            maxValue = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Return the biggest</span></span><br><span class="line">    <span class="keyword">return</span> maxValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">max(<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1000</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)  <span class="comment">// =&gt; 1000</span></span><br></pre></td></tr></table></figure>

<p><strong>The spread operator for function call</strong></p>
<p>When we use <code>...</code> in function definition, it has the opposite effect to the spread operator. </p>
<p>Using <code>...</code> in a function definition gathers multiple function arguments into an array. Rest parameters and the spread operator are often useful together</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log (args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">// print &quot;[1,2,3,4]&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params">innerf</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...arg</span>) </span>&#123; <span class="comment">// ...arg is the arguments passed to f(innerf)</span></span><br><span class="line">        <span class="keyword">return</span> innerf(...arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerf</span>(<span class="params">...x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(...x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(innerf)(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">// print &quot;1 2 3 4&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Syntax</tag>
      </tags>
  </entry>
  <entry>
    <title>Desctructuring object</title>
    <url>/2022/01/25/Desctructuring-object/</url>
    <content><![CDATA[<p>In a destructuring assignment, the value on the righthand side of the equals sign is an array or object (a “structured” value), and the lefthand side specifies one or more variable names using a syntax that mimics array and object literal syntax. When a destructuring assignment occurs, one or more values are extracted (“destructured”) from the value on the right and stored into the variables named on the left.</p>
<span id="more"></span>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x,y] = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(x,y); <span class="comment">// print 1 2</span></span><br><span class="line">[x,y] = [y,x]</span><br><span class="line"><span class="built_in">console</span>.log(x,y); <span class="comment">// print 2 1</span></span><br><span class="line">[x,y] = [x+<span class="number">1</span>, y+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(x,y); <span class="comment">// print 3 2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(o)); <span class="comment">// print [[&#x27;x&#x27;, 1], [&#x27;y&#x27;, 2]]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [name, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(o)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, value);</span><br><span class="line">&#125; <span class="comment">// print x 1 and y 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;x, y&#125; = o; <span class="comment">// extract from object o</span></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p><strong>Destructuring function parameter</strong></p>
<p>To extract attribute from object in function parameter:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;max&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">29</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params">&#123; name &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line">getName(person); <span class="comment">// print &#x27;max&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Syntax</tag>
      </tags>
  </entry>
</search>
